
Mob.Comm.Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00002ff4  00003088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080014a  0080014a  00003172  2**0
                  ALLOC
  3 .stab         00002e14  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f7  00000000  00000000  00005f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000707f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000071df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000736e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000093b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b438  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b87a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <main>
      8a:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ed       	ldi	r26, 0xDB	; 219
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ed       	ldi	r24, 0xDB	; 219
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ed       	ldi	r22, 0xDB	; 219
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_16>:
static u16 adc_value=0;
u8 x=0;//variable to read value of ADCH
static u16 ADC_Buffer=0;
static u8 ADC_Flag=0;

ISR(ADC_vect){
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
	adc_value=0;
     cbc:	10 92 4b 01 	sts	0x014B, r1
     cc0:	10 92 4a 01 	sts	0x014A, r1
	ADC_Buffer=ADCL;
     cc4:	e4 e2       	ldi	r30, 0x24	; 36
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	90 93 4e 01 	sts	0x014E, r25
     cd2:	80 93 4d 01 	sts	0x014D, r24
	x=ADCH;
     cd6:	e5 e2       	ldi	r30, 0x25	; 37
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 93 4c 01 	sts	0x014C, r24
	ADC_Flag=1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 4f 01 	sts	0x014F, r24
	//adc_value=(x<<8);
	//adc_value|=ADC_Buffer;
	adc_value=(x<<8) | ADC_Buffer;
     ce6:	80 91 4c 01 	lds	r24, 0x014C
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	98 2f       	mov	r25, r24
     cf0:	88 27       	eor	r24, r24
     cf2:	9c 01       	movw	r18, r24
     cf4:	80 91 4d 01 	lds	r24, 0x014D
     cf8:	90 91 4e 01 	lds	r25, 0x014E
     cfc:	82 2b       	or	r24, r18
     cfe:	93 2b       	or	r25, r19
     d00:	90 93 4b 01 	sts	0x014B, r25
     d04:	80 93 4a 01 	sts	0x014A, r24

     }
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <ADC_init>:

void ADC_init(void){
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	68 97       	sbiw	r28, 0x18	; 24
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
	 DIO_SETPINDIRECT(1,0,INPUT);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
	 DIO_SETPINDIRECT(1,1,INPUT);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
     ADMUX=0b01000000;//Channel ADC0 is selected with Vref=5v
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 e4       	ldi	r24, 0x40	; 64
     d50:	80 83       	st	Z, r24
    //  ADMUX=0b01000001;//Channel ADC1 is selected
     //ADCSRA=0b10011110;//8-bit Resolution with prescalar at clk/32 i.e:500khz with AVCC=5v
     ADCSRA=0b10001111;//Vref with 1024 resolution
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	8f e8       	ldi	r24, 0x8F	; 143
     d58:	80 83       	st	Z, r24
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a8 e4       	ldi	r26, 0x48	; 72
     d60:	b3 e4       	ldi	r27, 0x43	; 67
     d62:	8d 8b       	std	Y+21, r24	; 0x15
     d64:	9e 8b       	std	Y+22, r25	; 0x16
     d66:	af 8b       	std	Y+23, r26	; 0x17
     d68:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	2b ea       	ldi	r18, 0xAB	; 171
     d74:	3a ea       	ldi	r19, 0xAA	; 170
     d76:	4a ea       	ldi	r20, 0xAA	; 170
     d78:	50 e4       	ldi	r21, 0x40	; 64
     d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	89 8b       	std	Y+17, r24	; 0x11
     d84:	9a 8b       	std	Y+18, r25	; 0x12
     d86:	ab 8b       	std	Y+19, r26	; 0x13
     d88:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d8a:	69 89       	ldd	r22, Y+17	; 0x11
     d8c:	7a 89       	ldd	r23, Y+18	; 0x12
     d8e:	8b 89       	ldd	r24, Y+19	; 0x13
     d90:	9c 89       	ldd	r25, Y+20	; 0x14
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d9e:	88 23       	and	r24, r24
     da0:	1c f4       	brge	.+6      	; 0xda8 <ADC_init+0x86>
		__ticks = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	88 8b       	std	Y+16, r24	; 0x10
     da6:	91 c0       	rjmp	.+290    	; 0xeca <ADC_init+0x1a8>
	else if (__tmp > 255)
     da8:	69 89       	ldd	r22, Y+17	; 0x11
     daa:	7a 89       	ldd	r23, Y+18	; 0x12
     dac:	8b 89       	ldd	r24, Y+19	; 0x13
     dae:	9c 89       	ldd	r25, Y+20	; 0x14
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	53 e4       	ldi	r21, 0x43	; 67
     db8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	0c f0       	brlt	.+2      	; 0xdc2 <ADC_init+0xa0>
     dc0:	7b c0       	rjmp	.+246    	; 0xeb8 <ADC_init+0x196>
	{
		_delay_ms(__us / 1000.0);
     dc2:	6d 89       	ldd	r22, Y+21	; 0x15
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4a e7       	ldi	r20, 0x7A	; 122
     dd0:	54 e4       	ldi	r21, 0x44	; 68
     dd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	8c 87       	std	Y+12, r24	; 0x0c
     ddc:	9d 87       	std	Y+13, r25	; 0x0d
     dde:	ae 87       	std	Y+14, r26	; 0x0e
     de0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6c 85       	ldd	r22, Y+12	; 0x0c
     de4:	7d 85       	ldd	r23, Y+13	; 0x0d
     de6:	8e 85       	ldd	r24, Y+14	; 0x0e
     de8:	9f 85       	ldd	r25, Y+15	; 0x0f
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a e7       	ldi	r20, 0x7A	; 122
     df0:	55 e4       	ldi	r21, 0x45	; 69
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	88 87       	std	Y+8, r24	; 0x08
     dfc:	99 87       	std	Y+9, r25	; 0x09
     dfe:	aa 87       	std	Y+10, r26	; 0x0a
     e00:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     e02:	68 85       	ldd	r22, Y+8	; 0x08
     e04:	79 85       	ldd	r23, Y+9	; 0x09
     e06:	8a 85       	ldd	r24, Y+10	; 0x0a
     e08:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <ADC_init+0x102>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9f 83       	std	Y+7, r25	; 0x07
     e20:	8e 83       	std	Y+6, r24	; 0x06
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <ADC_init+0x180>
	else if (__tmp > 65535)
     e24:	68 85       	ldd	r22, Y+8	; 0x08
     e26:	79 85       	ldd	r23, Y+9	; 0x09
     e28:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <ADC_init+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6c 85       	ldd	r22, Y+12	; 0x0c
     e3e:	7d 85       	ldd	r23, Y+13	; 0x0d
     e40:	8e 85       	ldd	r24, Y+14	; 0x0e
     e42:	9f 85       	ldd	r25, Y+15	; 0x0f
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9f 83       	std	Y+7, r25	; 0x07
     e62:	8e 83       	std	Y+6, r24	; 0x06
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <ADC_init+0x162>
     e66:	80 e9       	ldi	r24, 0x90	; 144
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	9d 83       	std	Y+5, r25	; 0x05
     e6c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <ADC_init+0x150>
     e76:	9d 83       	std	Y+5, r25	; 0x05
     e78:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8e 81       	ldd	r24, Y+6	; 0x06
     e7c:	9f 81       	ldd	r25, Y+7	; 0x07
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9f 83       	std	Y+7, r25	; 0x07
     e82:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <ADC_init+0x144>
     e8c:	24 c0       	rjmp	.+72     	; 0xed6 <ADC_init+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	68 85       	ldd	r22, Y+8	; 0x08
     e90:	79 85       	ldd	r23, Y+9	; 0x09
     e92:	8a 85       	ldd	r24, Y+10	; 0x0a
     e94:	9b 85       	ldd	r25, Y+11	; 0x0b
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9f 83       	std	Y+7, r25	; 0x07
     ea0:	8e 83       	std	Y+6, r24	; 0x06
     ea2:	8e 81       	ldd	r24, Y+6	; 0x06
     ea4:	9f 81       	ldd	r25, Y+7	; 0x07
     ea6:	9b 83       	std	Y+3, r25	; 0x03
     ea8:	8a 83       	std	Y+2, r24	; 0x02
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <ADC_init+0x18c>
     eb2:	9b 83       	std	Y+3, r25	; 0x03
     eb4:	8a 83       	std	Y+2, r24	; 0x02
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <ADC_init+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     eb8:	69 89       	ldd	r22, Y+17	; 0x11
     eba:	7a 89       	ldd	r23, Y+18	; 0x12
     ebc:	8b 89       	ldd	r24, Y+19	; 0x13
     ebe:	9c 89       	ldd	r25, Y+20	; 0x14
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	88 8b       	std	Y+16, r24	; 0x10
     eca:	88 89       	ldd	r24, Y+16	; 0x10
     ecc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	8a 95       	dec	r24
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <ADC_init+0x1ae>
     ed4:	89 83       	std	Y+1, r24	; 0x01
     //SET_BIT(SREG,7);
     _delay_us(200);
            }
     ed6:	68 96       	adiw	r28, 0x18	; 24
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <ADC_startconv>:


void ADC_startconv(void){
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	68 97       	sbiw	r28, 0x18	; 24
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     SET_BIT(ADCSRA,6);
     efc:	a6 e2       	ldi	r26, 0x26	; 38
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e6 e2       	ldi	r30, 0x26	; 38
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	8c 93       	st	X, r24
	//ADCSRA|=0b01000000;

     while((ADCSRA & (0x10))==0);
     f0a:	e6 e2       	ldi	r30, 0x26	; 38
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	80 71       	andi	r24, 0x10	; 16
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	b9 f3       	breq	.-18     	; 0xf0a <ADC_startconv+0x22>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a8 e4       	ldi	r26, 0x48	; 72
     f22:	b3 e4       	ldi	r27, 0x43	; 67
     f24:	8d 8b       	std	Y+21, r24	; 0x15
     f26:	9e 8b       	std	Y+22, r25	; 0x16
     f28:	af 8b       	std	Y+23, r26	; 0x17
     f2a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f2c:	6d 89       	ldd	r22, Y+21	; 0x15
     f2e:	7e 89       	ldd	r23, Y+22	; 0x16
     f30:	8f 89       	ldd	r24, Y+23	; 0x17
     f32:	98 8d       	ldd	r25, Y+24	; 0x18
     f34:	2b ea       	ldi	r18, 0xAB	; 171
     f36:	3a ea       	ldi	r19, 0xAA	; 170
     f38:	4a ea       	ldi	r20, 0xAA	; 170
     f3a:	50 e4       	ldi	r21, 0x40	; 64
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	89 8b       	std	Y+17, r24	; 0x11
     f46:	9a 8b       	std	Y+18, r25	; 0x12
     f48:	ab 8b       	std	Y+19, r26	; 0x13
     f4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f4c:	69 89       	ldd	r22, Y+17	; 0x11
     f4e:	7a 89       	ldd	r23, Y+18	; 0x12
     f50:	8b 89       	ldd	r24, Y+19	; 0x13
     f52:	9c 89       	ldd	r25, Y+20	; 0x14
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	1c f4       	brge	.+6      	; 0xf6a <ADC_startconv+0x82>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	88 8b       	std	Y+16, r24	; 0x10
     f68:	91 c0       	rjmp	.+290    	; 0x108c <ADC_startconv+0x1a4>
	else if (__tmp > 255)
     f6a:	69 89       	ldd	r22, Y+17	; 0x11
     f6c:	7a 89       	ldd	r23, Y+18	; 0x12
     f6e:	8b 89       	ldd	r24, Y+19	; 0x13
     f70:	9c 89       	ldd	r25, Y+20	; 0x14
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	53 e4       	ldi	r21, 0x43	; 67
     f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	0c f0       	brlt	.+2      	; 0xf84 <ADC_startconv+0x9c>
     f82:	7b c0       	rjmp	.+246    	; 0x107a <ADC_startconv+0x192>
	{
		_delay_ms(__us / 1000.0);
     f84:	6d 89       	ldd	r22, Y+21	; 0x15
     f86:	7e 89       	ldd	r23, Y+22	; 0x16
     f88:	8f 89       	ldd	r24, Y+23	; 0x17
     f8a:	98 8d       	ldd	r25, Y+24	; 0x18
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	4a e7       	ldi	r20, 0x7A	; 122
     f92:	54 e4       	ldi	r21, 0x44	; 68
     f94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	8c 87       	std	Y+12, r24	; 0x0c
     f9e:	9d 87       	std	Y+13, r25	; 0x0d
     fa0:	ae 87       	std	Y+14, r26	; 0x0e
     fa2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa4:	6c 85       	ldd	r22, Y+12	; 0x0c
     fa6:	7d 85       	ldd	r23, Y+13	; 0x0d
     fa8:	8e 85       	ldd	r24, Y+14	; 0x0e
     faa:	9f 85       	ldd	r25, Y+15	; 0x0f
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4a e7       	ldi	r20, 0x7A	; 122
     fb2:	55 e4       	ldi	r21, 0x45	; 69
     fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	88 87       	std	Y+8, r24	; 0x08
     fbe:	99 87       	std	Y+9, r25	; 0x09
     fc0:	aa 87       	std	Y+10, r26	; 0x0a
     fc2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     fc4:	68 85       	ldd	r22, Y+8	; 0x08
     fc6:	79 85       	ldd	r23, Y+9	; 0x09
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	5f e3       	ldi	r21, 0x3F	; 63
     fd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fd8:	88 23       	and	r24, r24
     fda:	2c f4       	brge	.+10     	; 0xfe6 <ADC_startconv+0xfe>
		__ticks = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9f 83       	std	Y+7, r25	; 0x07
     fe2:	8e 83       	std	Y+6, r24	; 0x06
     fe4:	3f c0       	rjmp	.+126    	; 0x1064 <ADC_startconv+0x17c>
	else if (__tmp > 65535)
     fe6:	68 85       	ldd	r22, Y+8	; 0x08
     fe8:	79 85       	ldd	r23, Y+9	; 0x09
     fea:	8a 85       	ldd	r24, Y+10	; 0x0a
     fec:	9b 85       	ldd	r25, Y+11	; 0x0b
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	57 e4       	ldi	r21, 0x47	; 71
     ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	4c f5       	brge	.+82     	; 0x1050 <ADC_startconv+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1000:	7d 85       	ldd	r23, Y+13	; 0x0d
    1002:	8e 85       	ldd	r24, Y+14	; 0x0e
    1004:	9f 85       	ldd	r25, Y+15	; 0x0f
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9f 83       	std	Y+7, r25	; 0x07
    1024:	8e 83       	std	Y+6, r24	; 0x06
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <ADC_startconv+0x15e>
    1028:	80 e9       	ldi	r24, 0x90	; 144
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	9d 83       	std	Y+5, r25	; 0x05
    102e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <ADC_startconv+0x14c>
    1038:	9d 83       	std	Y+5, r25	; 0x05
    103a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	9f 83       	std	Y+7, r25	; 0x07
    1044:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1046:	8e 81       	ldd	r24, Y+6	; 0x06
    1048:	9f 81       	ldd	r25, Y+7	; 0x07
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	69 f7       	brne	.-38     	; 0x1028 <ADC_startconv+0x140>
    104e:	24 c0       	rjmp	.+72     	; 0x1098 <ADC_startconv+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1050:	68 85       	ldd	r22, Y+8	; 0x08
    1052:	79 85       	ldd	r23, Y+9	; 0x09
    1054:	8a 85       	ldd	r24, Y+10	; 0x0a
    1056:	9b 85       	ldd	r25, Y+11	; 0x0b
    1058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9f 83       	std	Y+7, r25	; 0x07
    1062:	8e 83       	std	Y+6, r24	; 0x06
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	9b 83       	std	Y+3, r25	; 0x03
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <ADC_startconv+0x188>
    1074:	9b 83       	std	Y+3, r25	; 0x03
    1076:	8a 83       	std	Y+2, r24	; 0x02
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <ADC_startconv+0x1b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    107a:	69 89       	ldd	r22, Y+17	; 0x11
    107c:	7a 89       	ldd	r23, Y+18	; 0x12
    107e:	8b 89       	ldd	r24, Y+19	; 0x13
    1080:	9c 89       	ldd	r25, Y+20	; 0x14
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	88 8b       	std	Y+16, r24	; 0x10
    108c:	88 89       	ldd	r24, Y+16	; 0x10
    108e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	8a 95       	dec	r24
    1094:	f1 f7       	brne	.-4      	; 0x1092 <ADC_startconv+0x1aa>
    1096:	89 83       	std	Y+1, r24	; 0x01
     _delay_us(200);
            }
    1098:	68 96       	adiw	r28, 0x18	; 24
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <ADC_status>:


u8 ADC_status(void){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62

   return ADC_Flag;
    10b2:	80 91 4f 01 	lds	r24, 0x014F
            }
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <ADC_Readvalue>:


u16 ADC_Readvalue(void){
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	ADC_Flag=0;
    10c4:	10 92 4f 01 	sts	0x014F, r1
	return ADC_Buffer;
    10c8:	80 91 4d 01 	lds	r24, 0x014D
    10cc:	90 91 4e 01 	lds	r25, 0x014E
            }
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <ADC_ReadFullvalue>:


u16 ADC_ReadFullvalue(void){
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	return adc_value;
    10de:	80 91 4a 01 	lds	r24, 0x014A
    10e2:	90 91 4b 01 	lds	r25, 0x014B
           }
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <bluetooth_init>:
#include<DIO.h>
#include<USART.h>
#include<String_OPR.h>
#define SIZE 6

void bluetooth_init(void){
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	2d 97       	sbiw	r28, 0x0d	; 13
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61

	//u8 z=0;/*variable to carry comparison of response arrays*/
	DIO_SETPINDIRECT(2,0,OUTPUT);/*PIN34 or KEY to select AT commands mode or Communication Mode*/
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
	 /*second to hold response        */
	 /* from hc-05 ,and, the third    */
	 /* is a buffer to hold received  */
	 /* response via UART             */
	/**********************************/
	s8 *instrc='\0',*resp='\0',buff[8]={0};
    110e:	1d 82       	std	Y+5, r1	; 0x05
    1110:	1c 82       	std	Y+4, r1	; 0x04
    1112:	1b 82       	std	Y+3, r1	; 0x03
    1114:	1a 82       	std	Y+2, r1	; 0x02
    1116:	88 e0       	ldi	r24, 0x08	; 8
    1118:	fe 01       	movw	r30, r28
    111a:	36 96       	adiw	r30, 0x06	; 6
    111c:	df 01       	movw	r26, r30
    111e:	98 2f       	mov	r25, r24
    1120:	1d 92       	st	X+, r1
    1122:	9a 95       	dec	r25
    1124:	e9 f7       	brne	.-6      	; 0x1120 <bluetooth_init+0x34>
	/*****************************************/
	/*Test Command to check whether Bluetooth*/
	/*            module is working or not   */
	/*****************************************/
	//SIZE=6;
	instrc="AT\r\n";
    1126:	80 e6       	ldi	r24, 0x60	; 96
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9d 83       	std	Y+5, r25	; 0x05
    112c:	8c 83       	std	Y+4, r24	; 0x04
	resp="OK\r\n";
    112e:	85 e6       	ldi	r24, 0x65	; 101
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9b 83       	std	Y+3, r25	; 0x03
    1134:	8a 83       	std	Y+2, r24	; 0x02
	DIO_SETPINVALUE(2,0,1);/*Apply High level signal to KEY to enter AT commands mode*/
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    1140:	0a c0       	rjmp	.+20     	; 0x1156 <bluetooth_init+0x6a>
	while((*instrc)!='\0'){
		USART_transmit(*instrc);
    1142:	ec 81       	ldd	r30, Y+4	; 0x04
    1144:	fd 81       	ldd	r31, Y+5	; 0x05
    1146:	80 81       	ld	r24, Z
    1148:	0e 94 a3 14 	call	0x2946	; 0x2946 <USART_transmit>
		instrc++;
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	9d 83       	std	Y+5, r25	; 0x05
    1154:	8c 83       	std	Y+4, r24	; 0x04
	/*****************************************/
	//SIZE=6;
	instrc="AT\r\n";
	resp="OK\r\n";
	DIO_SETPINVALUE(2,0,1);/*Apply High level signal to KEY to enter AT commands mode*/
	while((*instrc)!='\0'){
    1156:	ec 81       	ldd	r30, Y+4	; 0x04
    1158:	fd 81       	ldd	r31, Y+5	; 0x05
    115a:	80 81       	ld	r24, Z
    115c:	88 23       	and	r24, r24
    115e:	89 f7       	brne	.-30     	; 0x1142 <bluetooth_init+0x56>
		USART_transmit(*instrc);
		instrc++;
	                }
	for(ck_count=0;ck_count<SIZE;ck_count++){
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	13 c0       	rjmp	.+38     	; 0x118a <bluetooth_init+0x9e>
		while(GETRxSTATUS()==0);
    1164:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <GETRxSTATUS>
    1168:	88 23       	and	r24, r24
    116a:	e1 f3       	breq	.-8      	; 0x1164 <bluetooth_init+0x78>
		  buff[ck_count]=USART_rece();
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	08 2f       	mov	r16, r24
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	0e 94 ba 14 	call	0x2974	; 0x2974 <USART_rece>
    1176:	28 2f       	mov	r18, r24
    1178:	ce 01       	movw	r24, r28
    117a:	06 96       	adiw	r24, 0x06	; 6
    117c:	fc 01       	movw	r30, r24
    117e:	e0 0f       	add	r30, r16
    1180:	f1 1f       	adc	r31, r17
    1182:	20 83       	st	Z, r18
	DIO_SETPINVALUE(2,0,1);/*Apply High level signal to KEY to enter AT commands mode*/
	while((*instrc)!='\0'){
		USART_transmit(*instrc);
		instrc++;
	                }
	for(ck_count=0;ck_count<SIZE;ck_count++){
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	86 30       	cpi	r24, 0x06	; 6
    118e:	50 f3       	brcs	.-44     	; 0x1164 <bluetooth_init+0x78>
		while(GETRxSTATUS()==0);
		  buff[ck_count]=USART_rece();
	                   }
    buff[ck_count]='\0';/*Insert Terminating Null at the end of string*/
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	ce 01       	movw	r24, r28
    1198:	06 96       	adiw	r24, 0x06	; 6
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	10 82       	st	Z, r1
    11a2:	30 c0       	rjmp	.+96     	; 0x1204 <bluetooth_init+0x118>
    /**********************************************/
    /*Check if bluetooth responds correctly or not*/
    /**********************************************/
    while(String_comp(resp,SIZE,buff,SIZE)!=0){
    	while((*instrc)!='\0'){
    			USART_transmit(*instrc);
    11a4:	ec 81       	ldd	r30, Y+4	; 0x04
    11a6:	fd 81       	ldd	r31, Y+5	; 0x05
    11a8:	80 81       	ld	r24, Z
    11aa:	0e 94 a3 14 	call	0x2946	; 0x2946 <USART_transmit>
    			instrc++;
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	9d 83       	std	Y+5, r25	; 0x05
    11b6:	8c 83       	std	Y+4, r24	; 0x04

    /**********************************************/
    /*Check if bluetooth responds correctly or not*/
    /**********************************************/
    while(String_comp(resp,SIZE,buff,SIZE)!=0){
    	while((*instrc)!='\0'){
    11b8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ba:	fd 81       	ldd	r31, Y+5	; 0x05
    11bc:	80 81       	ld	r24, Z
    11be:	88 23       	and	r24, r24
    11c0:	89 f7       	brne	.-30     	; 0x11a4 <bluetooth_init+0xb8>
    			USART_transmit(*instrc);
    			instrc++;
    		                }
    		for(ck_count=0;ck_count<SIZE;ck_count++){
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	13 c0       	rjmp	.+38     	; 0x11ec <bluetooth_init+0x100>
    			while(GETRxSTATUS()==0);
    11c6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <GETRxSTATUS>
    11ca:	88 23       	and	r24, r24
    11cc:	e1 f3       	breq	.-8      	; 0x11c6 <bluetooth_init+0xda>
    			  buff[ck_count]=USART_rece();
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	08 2f       	mov	r16, r24
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	0e 94 ba 14 	call	0x2974	; 0x2974 <USART_rece>
    11d8:	28 2f       	mov	r18, r24
    11da:	ce 01       	movw	r24, r28
    11dc:	06 96       	adiw	r24, 0x06	; 6
    11de:	fc 01       	movw	r30, r24
    11e0:	e0 0f       	add	r30, r16
    11e2:	f1 1f       	adc	r31, r17
    11e4:	20 83       	st	Z, r18
    while(String_comp(resp,SIZE,buff,SIZE)!=0){
    	while((*instrc)!='\0'){
    			USART_transmit(*instrc);
    			instrc++;
    		                }
    		for(ck_count=0;ck_count<SIZE;ck_count++){
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	86 30       	cpi	r24, 0x06	; 6
    11f0:	50 f3       	brcs	.-44     	; 0x11c6 <bluetooth_init+0xda>
    			while(GETRxSTATUS()==0);
    			  buff[ck_count]=USART_rece();
    		                   }
    	    buff[ck_count]='\0';/*Insert Terminating Null at the end of string*/
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	ce 01       	movw	r24, r28
    11fa:	06 96       	adiw	r24, 0x06	; 6
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	10 82       	st	Z, r1
    buff[ck_count]='\0';/*Insert Terminating Null at the end of string*/

    /**********************************************/
    /*Check if bluetooth responds correctly or not*/
    /**********************************************/
    while(String_comp(resp,SIZE,buff,SIZE)!=0){
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	9e 01       	movw	r18, r28
    120a:	2a 5f       	subi	r18, 0xFA	; 250
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	66 e0       	ldi	r22, 0x06	; 6
    1210:	a9 01       	movw	r20, r18
    1212:	26 e0       	ldi	r18, 0x06	; 6
    1214:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    1218:	88 23       	and	r24, r24
    121a:	71 f6       	brne	.-100    	; 0x11b8 <bluetooth_init+0xcc>
       /********************************************************************/
       /*In case Bluetooth responds by OK Set Parameters of Blutooth Module*/
       /********************************************************************/

       /*Empty Buffer array*/
        for(ck_count=0;ck_count<8;ck_count++){
    121c:	19 82       	std	Y+1, r1	; 0x01
    121e:	0c c0       	rjmp	.+24     	; 0x1238 <bluetooth_init+0x14c>
        			  buff[ck_count]=0;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	ce 01       	movw	r24, r28
    1228:	06 96       	adiw	r24, 0x06	; 6
    122a:	fc 01       	movw	r30, r24
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	10 82       	st	Z, r1
       /********************************************************************/
       /*In case Bluetooth responds by OK Set Parameters of Blutooth Module*/
       /********************************************************************/

       /*Empty Buffer array*/
        for(ck_count=0;ck_count<8;ck_count++){
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	88 f3       	brcs	.-30     	; 0x1220 <bluetooth_init+0x134>
        			  buff[ck_count]=0;
                           }
        buff[ck_count]='\0';
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	ce 01       	movw	r24, r28
    1246:	06 96       	adiw	r24, 0x06	; 6
    1248:	fc 01       	movw	r30, r24
    124a:	e2 0f       	add	r30, r18
    124c:	f3 1f       	adc	r31, r19
    124e:	10 82       	st	Z, r1

        /*Set Parameters of Blutooth Module::::::Baud Rate:9600,8-bit,1-stop,No parity*/
        //SIZE=6;
    	instrc="AT+UART=9600,1,0,\r\n";
    1250:	8a e6       	ldi	r24, 0x6A	; 106
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9d 83       	std	Y+5, r25	; 0x05
    1256:	8c 83       	std	Y+4, r24	; 0x04
    1258:	30 c0       	rjmp	.+96     	; 0x12ba <bluetooth_init+0x1ce>
    	//resp="OK\r\n";
    	/*Check if bluetooth is configured correctly or not*/
    	while(String_comp(resp,SIZE,buff,SIZE)!=0){
    	       while((*instrc)!='\0'){
    			      USART_transmit(*instrc);
    125a:	ec 81       	ldd	r30, Y+4	; 0x04
    125c:	fd 81       	ldd	r31, Y+5	; 0x05
    125e:	80 81       	ld	r24, Z
    1260:	0e 94 a3 14 	call	0x2946	; 0x2946 <USART_transmit>
    			      instrc++;
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	9d 83       	std	Y+5, r25	; 0x05
    126c:	8c 83       	std	Y+4, r24	; 0x04
        //SIZE=6;
    	instrc="AT+UART=9600,1,0,\r\n";
    	//resp="OK\r\n";
    	/*Check if bluetooth is configured correctly or not*/
    	while(String_comp(resp,SIZE,buff,SIZE)!=0){
    	       while((*instrc)!='\0'){
    126e:	ec 81       	ldd	r30, Y+4	; 0x04
    1270:	fd 81       	ldd	r31, Y+5	; 0x05
    1272:	80 81       	ld	r24, Z
    1274:	88 23       	and	r24, r24
    1276:	89 f7       	brne	.-30     	; 0x125a <bluetooth_init+0x16e>
    			      USART_transmit(*instrc);
    			      instrc++;
    		                }
    	       for(ck_count=0;ck_count<SIZE;ck_count++){
    1278:	19 82       	std	Y+1, r1	; 0x01
    127a:	13 c0       	rjmp	.+38     	; 0x12a2 <bluetooth_init+0x1b6>
    			     while(GETRxSTATUS()==0);
    127c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <GETRxSTATUS>
    1280:	88 23       	and	r24, r24
    1282:	e1 f3       	breq	.-8      	; 0x127c <bluetooth_init+0x190>
    			       buff[ck_count]=USART_rece();
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	08 2f       	mov	r16, r24
    1288:	10 e0       	ldi	r17, 0x00	; 0
    128a:	0e 94 ba 14 	call	0x2974	; 0x2974 <USART_rece>
    128e:	28 2f       	mov	r18, r24
    1290:	ce 01       	movw	r24, r28
    1292:	06 96       	adiw	r24, 0x06	; 6
    1294:	fc 01       	movw	r30, r24
    1296:	e0 0f       	add	r30, r16
    1298:	f1 1f       	adc	r31, r17
    129a:	20 83       	st	Z, r18
    	while(String_comp(resp,SIZE,buff,SIZE)!=0){
    	       while((*instrc)!='\0'){
    			      USART_transmit(*instrc);
    			      instrc++;
    		                }
    	       for(ck_count=0;ck_count<SIZE;ck_count++){
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	86 30       	cpi	r24, 0x06	; 6
    12a6:	50 f3       	brcs	.-44     	; 0x127c <bluetooth_init+0x190>
    			     while(GETRxSTATUS()==0);
    			       buff[ck_count]=USART_rece();
    		                   }
    	buff[ck_count]='\0';/*Insert Terminating Null at the end of string*/
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	ce 01       	movw	r24, r28
    12b0:	06 96       	adiw	r24, 0x06	; 6
    12b2:	fc 01       	movw	r30, r24
    12b4:	e2 0f       	add	r30, r18
    12b6:	f3 1f       	adc	r31, r19
    12b8:	10 82       	st	Z, r1
        /*Set Parameters of Blutooth Module::::::Baud Rate:9600,8-bit,1-stop,No parity*/
        //SIZE=6;
    	instrc="AT+UART=9600,1,0,\r\n";
    	//resp="OK\r\n";
    	/*Check if bluetooth is configured correctly or not*/
    	while(String_comp(resp,SIZE,buff,SIZE)!=0){
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	9e 01       	movw	r18, r28
    12c0:	2a 5f       	subi	r18, 0xFA	; 250
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	66 e0       	ldi	r22, 0x06	; 6
    12c6:	a9 01       	movw	r20, r18
    12c8:	26 e0       	ldi	r18, 0x06	; 6
    12ca:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    12ce:	88 23       	and	r24, r24
    12d0:	71 f6       	brne	.-100    	; 0x126e <bluetooth_init+0x182>
    	//z=String_comp(resp,SIZE,buff,SIZE);
    	//while(z!=0);/*Stay in loop as long as the response is not correct*/
                      }

        /*Release KEY pin t start communication mode with bluetooth*/
    	DIO_SETPINVALUE(2,0,0);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
                                      }
    12dc:	2d 96       	adiw	r28, 0x0d	; 13
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	08 95       	ret

000012f2 <DIO_SETPINDIRECT>:





void DIO_SETPINDIRECT(u8 port,u8 pin,u8 direction){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_SETPINDIRECT+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_SETPINDIRECT+0x8>
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	6a 83       	std	Y+2, r22	; 0x02
    1304:	4b 83       	std	Y+3, r20	; 0x03
  switch(port){
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	3d 83       	std	Y+5, r19	; 0x05
    130e:	2c 83       	std	Y+4, r18	; 0x04
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	91 05       	cpc	r25, r1
    1318:	09 f4       	brne	.+2      	; 0x131c <DIO_SETPINDIRECT+0x2a>
    131a:	44 c0       	rjmp	.+136    	; 0x13a4 <DIO_SETPINDIRECT+0xb2>
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	23 30       	cpi	r18, 0x03	; 3
    1322:	31 05       	cpc	r19, r1
    1324:	34 f4       	brge	.+12     	; 0x1332 <DIO_SETPINDIRECT+0x40>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	71 f0       	breq	.+28     	; 0x134c <DIO_SETPINDIRECT+0x5a>
    1330:	bc c0       	rjmp	.+376    	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	23 30       	cpi	r18, 0x03	; 3
    1338:	31 05       	cpc	r19, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <DIO_SETPINDIRECT+0x4c>
    133c:	5f c0       	rjmp	.+190    	; 0x13fc <DIO_SETPINDIRECT+0x10a>
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	91 05       	cpc	r25, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <DIO_SETPINDIRECT+0x58>
    1348:	85 c0       	rjmp	.+266    	; 0x1454 <DIO_SETPINDIRECT+0x162>
    134a:	af c0       	rjmp	.+350    	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
         case 1:{
	        if(direction==OUTPUT){
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f4       	brne	.+40     	; 0x137a <DIO_SETPINDIRECT+0x88>
	        	SET_BIT(DDRA,pin);
    1352:	aa e1       	ldi	r26, 0x1A	; 26
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ea e1       	ldi	r30, 0x1A	; 26
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_SETPINDIRECT+0x7e>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_SETPINDIRECT+0x7a>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	98 c0       	rjmp	.+304    	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
	              }
	        else{
	        	CLR_BIT(DDRA,pin);
    137a:	aa e1       	ldi	r26, 0x1A	; 26
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ea e1       	ldi	r30, 0x1A	; 26
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_SETPINDIRECT+0xa6>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_SETPINDIRECT+0xa2>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	83 c0       	rjmp	.+262    	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
	        }
	        break;
            }
         case 2:{
        	 if(direction==OUTPUT){
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <DIO_SETPINDIRECT+0xe0>
        	 	        	SET_BIT(DDRB,pin);
    13aa:	a7 e1       	ldi	r26, 0x17	; 23
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e7 e1       	ldi	r30, 0x17	; 23
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_SETPINDIRECT+0xd6>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_SETPINDIRECT+0xd2>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	6c c0       	rjmp	.+216    	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
        	 	              }
        	 	        else{
        	 	        	CLR_BIT(DDRB,pin);
    13d2:	a7 e1       	ldi	r26, 0x17	; 23
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e7 e1       	ldi	r30, 0x17	; 23
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_SETPINDIRECT+0xfe>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_SETPINDIRECT+0xfa>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	57 c0       	rjmp	.+174    	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
        	 	        }
        	 	        break;
        	             }
         case 3:{
        	 if(direction==OUTPUT){
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	a1 f4       	brne	.+40     	; 0x142a <DIO_SETPINDIRECT+0x138>
        	 	        	SET_BIT(DDRC,pin);
    1402:	a4 e1       	ldi	r26, 0x14	; 20
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e4 e1       	ldi	r30, 0x14	; 20
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_SETPINDIRECT+0x12e>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_SETPINDIRECT+0x12a>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	40 c0       	rjmp	.+128    	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
        	 	              }
        	 	        else{
        	 	        	CLR_BIT(DDRC,pin);
    142a:	a4 e1       	ldi	r26, 0x14	; 20
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e4 e1       	ldi	r30, 0x14	; 20
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_SETPINDIRECT+0x156>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_SETPINDIRECT+0x152>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	2b c0       	rjmp	.+86     	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
        	 	        }
        	 	        break;
        	             }
         case 4:{
        	 if(direction==OUTPUT){
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	a1 f4       	brne	.+40     	; 0x1482 <DIO_SETPINDIRECT+0x190>
        	 	        	SET_BIT(DDRD,pin);
    145a:	a1 e1       	ldi	r26, 0x11	; 17
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e1 e1       	ldi	r30, 0x11	; 17
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_SETPINDIRECT+0x186>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_SETPINDIRECT+0x182>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <DIO_SETPINDIRECT+0x1b8>
        	 	              }
        	 	        else{
        	 	        	CLR_BIT(DDRD,pin);
    1482:	a1 e1       	ldi	r26, 0x11	; 17
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e1 e1       	ldi	r30, 0x11	; 17
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_SETPINDIRECT+0x1ae>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_SETPINDIRECT+0x1aa>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
        	 	        }
        	 	        break;
        	             }
           }
         }
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_SETPINVALUE>:




void DIO_SETPINVALUE(u8 port,u8 pin,u8 pvalue){
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_SETPINVALUE+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_SETPINVALUE+0x8>
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6a 83       	std	Y+2, r22	; 0x02
    14cc:	4b 83       	std	Y+3, r20	; 0x03
          switch(port){
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3d 83       	std	Y+5, r19	; 0x05
    14d6:	2c 83       	std	Y+4, r18	; 0x04
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	91 05       	cpc	r25, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <DIO_SETPINVALUE+0x2a>
    14e2:	57 c0       	rjmp	.+174    	; 0x1592 <DIO_SETPINVALUE+0xd8>
    14e4:	2c 81       	ldd	r18, Y+4	; 0x04
    14e6:	3d 81       	ldd	r19, Y+5	; 0x05
    14e8:	23 30       	cpi	r18, 0x03	; 3
    14ea:	31 05       	cpc	r19, r1
    14ec:	34 f4       	brge	.+12     	; 0x14fa <DIO_SETPINVALUE+0x40>
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	71 f0       	breq	.+28     	; 0x1514 <DIO_SETPINVALUE+0x5a>
    14f8:	08 c1       	rjmp	.+528    	; 0x170a <DIO_SETPINVALUE+0x250>
    14fa:	2c 81       	ldd	r18, Y+4	; 0x04
    14fc:	3d 81       	ldd	r19, Y+5	; 0x05
    14fe:	23 30       	cpi	r18, 0x03	; 3
    1500:	31 05       	cpc	r19, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <DIO_SETPINVALUE+0x4c>
    1504:	85 c0       	rjmp	.+266    	; 0x1610 <DIO_SETPINVALUE+0x156>
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	84 30       	cpi	r24, 0x04	; 4
    150c:	91 05       	cpc	r25, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <DIO_SETPINVALUE+0x58>
    1510:	be c0       	rjmp	.+380    	; 0x168e <DIO_SETPINVALUE+0x1d4>
    1512:	fb c0       	rjmp	.+502    	; 0x170a <DIO_SETPINVALUE+0x250>
          case 1:{
        	  SET_BIT(DDRA,pin);
    1514:	aa e1       	ldi	r26, 0x1A	; 26
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ea e1       	ldi	r30, 0x1A	; 26
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_SETPINVALUE+0x78>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_SETPINVALUE+0x74>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
        	    if(pvalue!=0){
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 23       	and	r24, r24
    153e:	a1 f0       	breq	.+40     	; 0x1568 <DIO_SETPINVALUE+0xae>
        	    	SET_BIT(PORTA,pin);
    1540:	ab e1       	ldi	r26, 0x1B	; 27
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	eb e1       	ldi	r30, 0x1B	; 27
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_SETPINVALUE+0xa4>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_SETPINVALUE+0xa0>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	d1 c0       	rjmp	.+418    	; 0x170a <DIO_SETPINVALUE+0x250>
        	        }
        	    else{
        	    	CLR_BIT(PORTA,pin);
    1568:	ab e1       	ldi	r26, 0x1B	; 27
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	eb e1       	ldi	r30, 0x1B	; 27
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_SETPINVALUE+0xcc>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_SETPINVALUE+0xc8>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	bc c0       	rjmp	.+376    	; 0x170a <DIO_SETPINVALUE+0x250>
        	        }
        	  break;
                  }
          case 2:{
        	  SET_BIT(DDRB,pin);
    1592:	a7 e1       	ldi	r26, 0x17	; 23
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e7 e1       	ldi	r30, 0x17	; 23
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_SETPINVALUE+0xf6>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_SETPINVALUE+0xf2>
    15b4:	84 2b       	or	r24, r20
    15b6:	8c 93       	st	X, r24
        	          	    if(pvalue!=0){
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	88 23       	and	r24, r24
    15bc:	a1 f0       	breq	.+40     	; 0x15e6 <DIO_SETPINVALUE+0x12c>
        	          	    	SET_BIT(PORTB,pin);
    15be:	a8 e1       	ldi	r26, 0x18	; 24
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e1       	ldi	r30, 0x18	; 24
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_SETPINVALUE+0x122>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_SETPINVALUE+0x11e>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	92 c0       	rjmp	.+292    	; 0x170a <DIO_SETPINVALUE+0x250>
        	          	        }
        	          	    else{
        	          	    	CLR_BIT(PORTB,pin);
    15e6:	a8 e1       	ldi	r26, 0x18	; 24
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e8 e1       	ldi	r30, 0x18	; 24
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_SETPINVALUE+0x14a>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_SETPINVALUE+0x146>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	7d c0       	rjmp	.+250    	; 0x170a <DIO_SETPINVALUE+0x250>
        	          	        }
        	  break;
                   }
          case 3:{
        	  SET_BIT(DDRC,pin);
    1610:	a4 e1       	ldi	r26, 0x14	; 20
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e4 e1       	ldi	r30, 0x14	; 20
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_SETPINVALUE+0x174>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_SETPINVALUE+0x170>
    1632:	84 2b       	or	r24, r20
    1634:	8c 93       	st	X, r24
        	          	    if(pvalue!=0){
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	88 23       	and	r24, r24
    163a:	a1 f0       	breq	.+40     	; 0x1664 <DIO_SETPINVALUE+0x1aa>
        	          	    	SET_BIT(PORTC,pin);
    163c:	a5 e1       	ldi	r26, 0x15	; 21
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e5 e1       	ldi	r30, 0x15	; 21
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <DIO_SETPINVALUE+0x1a0>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <DIO_SETPINVALUE+0x19c>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	53 c0       	rjmp	.+166    	; 0x170a <DIO_SETPINVALUE+0x250>
        	          	        }
        	          	    else{
        	          	    	CLR_BIT(PORTC,pin);
    1664:	a5 e1       	ldi	r26, 0x15	; 21
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e5 e1       	ldi	r30, 0x15	; 21
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_SETPINVALUE+0x1c8>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_SETPINVALUE+0x1c4>
    1686:	80 95       	com	r24
    1688:	84 23       	and	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	3e c0       	rjmp	.+124    	; 0x170a <DIO_SETPINVALUE+0x250>
        	          	        }
        	  break;
                   }
          case 4:{
        	  SET_BIT(DDRD,pin);
    168e:	a1 e1       	ldi	r26, 0x11	; 17
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e1 e1       	ldi	r30, 0x11	; 17
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_SETPINVALUE+0x1f2>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_SETPINVALUE+0x1ee>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
        	          	    if(pvalue!=0){
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	88 23       	and	r24, r24
    16b8:	a1 f0       	breq	.+40     	; 0x16e2 <DIO_SETPINVALUE+0x228>
        	          	    	SET_BIT(PORTD,pin);
    16ba:	a2 e1       	ldi	r26, 0x12	; 18
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e2 e1       	ldi	r30, 0x12	; 18
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_SETPINVALUE+0x21e>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_SETPINVALUE+0x21a>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <DIO_SETPINVALUE+0x250>
        	          	        }
        	          	    else{
        	          	    	CLR_BIT(PORTD,pin);
    16e2:	a2 e1       	ldi	r26, 0x12	; 18
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e2 e1       	ldi	r30, 0x12	; 18
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_SETPINVALUE+0x246>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_SETPINVALUE+0x242>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
        	          	        }
        	  break;
                    }
                }
                 }
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <get_pinvalue>:


u8 get_pinvalue(u8 port,u8 pin){
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <get_pinvalue+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <get_pinvalue+0x8>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <get_pinvalue+0xa>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	8a 83       	std	Y+2, r24	; 0x02
    172a:	6b 83       	std	Y+3, r22	; 0x03
	u8 inp_value=0;
    172c:	19 82       	std	Y+1, r1	; 0x01
	switch(port){
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3e 83       	std	Y+6, r19	; 0x06
    1736:	2d 83       	std	Y+5, r18	; 0x05
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	91 05       	cpc	r25, r1
    1740:	91 f1       	breq	.+100    	; 0x17a6 <get_pinvalue+0x8c>
    1742:	2d 81       	ldd	r18, Y+5	; 0x05
    1744:	3e 81       	ldd	r19, Y+6	; 0x06
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	31 05       	cpc	r19, r1
    174a:	34 f4       	brge	.+12     	; 0x1758 <get_pinvalue+0x3e>
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	91 05       	cpc	r25, r1
    1754:	69 f0       	breq	.+26     	; 0x1770 <get_pinvalue+0x56>
    1756:	77 c0       	rjmp	.+238    	; 0x1846 <get_pinvalue+0x12c>
    1758:	2d 81       	ldd	r18, Y+5	; 0x05
    175a:	3e 81       	ldd	r19, Y+6	; 0x06
    175c:	23 30       	cpi	r18, 0x03	; 3
    175e:	31 05       	cpc	r19, r1
    1760:	e1 f1       	breq	.+120    	; 0x17da <get_pinvalue+0xc0>
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	84 30       	cpi	r24, 0x04	; 4
    1768:	91 05       	cpc	r25, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <get_pinvalue+0x54>
    176c:	51 c0       	rjmp	.+162    	; 0x1810 <get_pinvalue+0xf6>
    176e:	6b c0       	rjmp	.+214    	; 0x1846 <get_pinvalue+0x12c>
	          case 1:{
	        	  //DDRA=0x00;
	        	  CLR_BIT(DDRA,pin);
    1770:	aa e1       	ldi	r26, 0x1A	; 26
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ea e1       	ldi	r30, 0x1A	; 26
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <get_pinvalue+0x74>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <get_pinvalue+0x70>
    1792:	80 95       	com	r24
    1794:	84 23       	and	r24, r20
    1796:	8c 93       	st	X, r24
	        	  inp_value=PINA;
    1798:	e9 e1       	ldi	r30, 0x19	; 25
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	89 83       	std	Y+1, r24	; 0x01
	        	  return inp_value;
    17a0:	99 81       	ldd	r25, Y+1	; 0x01
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	51 c0       	rjmp	.+162    	; 0x1848 <get_pinvalue+0x12e>
	        	  break;
	               }
	          case 2:{
	        	  //DDRB=0x00;
	        	  CLR_BIT(DDRB,pin);
    17a6:	a7 e1       	ldi	r26, 0x17	; 23
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e7 e1       	ldi	r30, 0x17	; 23
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <get_pinvalue+0xa8>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	2a 95       	dec	r18
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <get_pinvalue+0xa4>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
	        	  inp_value=PINB;
    17cc:	e6 e1       	ldi	r30, 0x16	; 22
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	89 83       	std	Y+1, r24	; 0x01
	        	  return inp_value;
    17d4:	29 81       	ldd	r18, Y+1	; 0x01
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	37 c0       	rjmp	.+110    	; 0x1848 <get_pinvalue+0x12e>
	        	  break;
	                   }
	          case 3:{
	        	  //DDRC=0x00;
	        	  CLR_BIT(DDRC,pin);
    17da:	a4 e1       	ldi	r26, 0x14	; 20
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e4 e1       	ldi	r30, 0x14	; 20
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <get_pinvalue+0xde>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <get_pinvalue+0xda>
    17fc:	80 95       	com	r24
    17fe:	84 23       	and	r24, r20
    1800:	8c 93       	st	X, r24
	        	  inp_value=PINC;
    1802:	e3 e1       	ldi	r30, 0x13	; 19
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	89 83       	std	Y+1, r24	; 0x01
	        	  return inp_value;
    180a:	39 81       	ldd	r19, Y+1	; 0x01
    180c:	3c 83       	std	Y+4, r19	; 0x04
    180e:	1c c0       	rjmp	.+56     	; 0x1848 <get_pinvalue+0x12e>
	        	  break;
	                  }
	          case 4:{
	        	  //DDRD=0x00;
	        	  CLR_BIT(DDRD,pin);
    1810:	a1 e1       	ldi	r26, 0x11	; 17
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e1 e1       	ldi	r30, 0x11	; 17
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <get_pinvalue+0x114>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <get_pinvalue+0x110>
    1832:	80 95       	com	r24
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
	        	  inp_value=PIND;
    1838:	e0 e1       	ldi	r30, 0x10	; 16
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	89 83       	std	Y+1, r24	; 0x01
	        	  return inp_value;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	8c 83       	std	Y+4, r24	; 0x04
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <get_pinvalue+0x12e>
	        	  break;
	                }
	          default:return 0;
    1846:	1c 82       	std	Y+4, r1	; 0x04
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
	         }
             }
    184a:	26 96       	adiw	r28, 0x06	; 6
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <SET_PORTDIRECTION>:


void SET_PORTDIRECTION(u8 port,u8 direction){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <SET_PORTDIRECTION+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <SET_PORTDIRECTION+0x8>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port){
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3c 83       	std	Y+4, r19	; 0x04
    1874:	2b 83       	std	Y+3, r18	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	91 05       	cpc	r25, r1
    187e:	11 f1       	breq	.+68     	; 0x18c4 <SET_PORTDIRECTION+0x68>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	23 30       	cpi	r18, 0x03	; 3
    1886:	31 05       	cpc	r19, r1
    1888:	34 f4       	brge	.+12     	; 0x1896 <SET_PORTDIRECTION+0x3a>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	61 f0       	breq	.+24     	; 0x18ac <SET_PORTDIRECTION+0x50>
    1894:	3a c0       	rjmp	.+116    	; 0x190a <SET_PORTDIRECTION+0xae>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	23 30       	cpi	r18, 0x03	; 3
    189c:	31 05       	cpc	r19, r1
    189e:	f1 f0       	breq	.+60     	; 0x18dc <SET_PORTDIRECTION+0x80>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	91 05       	cpc	r25, r1
    18a8:	29 f1       	breq	.+74     	; 0x18f4 <SET_PORTDIRECTION+0x98>
    18aa:	2f c0       	rjmp	.+94     	; 0x190a <SET_PORTDIRECTION+0xae>
	          case 1:{
	        	  if(direction!=INPUT){
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	88 23       	and	r24, r24
    18b0:	29 f0       	breq	.+10     	; 0x18bc <SET_PORTDIRECTION+0x60>
	        		  DDRA=0xFF;
    18b2:	ea e1       	ldi	r30, 0x1A	; 26
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	80 83       	st	Z, r24
    18ba:	27 c0       	rjmp	.+78     	; 0x190a <SET_PORTDIRECTION+0xae>
	        	  }
	        	  else{
	        		 DDRA=0x00;
    18bc:	ea e1       	ldi	r30, 0x1A	; 26
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	10 82       	st	Z, r1
    18c2:	23 c0       	rjmp	.+70     	; 0x190a <SET_PORTDIRECTION+0xae>
	        	     }
	        	  break;
	                }
	          case 2:{
	        	  if(direction!=INPUT){
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	88 23       	and	r24, r24
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <SET_PORTDIRECTION+0x78>
	        	  	        		  DDRB=0xFF;
    18ca:	e7 e1       	ldi	r30, 0x17	; 23
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	80 83       	st	Z, r24
    18d2:	1b c0       	rjmp	.+54     	; 0x190a <SET_PORTDIRECTION+0xae>
	        	  	        	  }
	        	  	        	  else{
	        	  	        		 DDRB=0x00;
    18d4:	e7 e1       	ldi	r30, 0x17	; 23
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	10 82       	st	Z, r1
    18da:	17 c0       	rjmp	.+46     	; 0x190a <SET_PORTDIRECTION+0xae>
	        	  	        	     }
	        	  break;
	                   }
	          case 3:{
	        	  if(direction!=INPUT){
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	88 23       	and	r24, r24
    18e0:	29 f0       	breq	.+10     	; 0x18ec <SET_PORTDIRECTION+0x90>
	        	  	        		  DDRC=0xFF;
    18e2:	e4 e1       	ldi	r30, 0x14	; 20
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	80 83       	st	Z, r24
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <SET_PORTDIRECTION+0xae>
	        	  	        	  }
	        	  	        	  else{
	        	  	        		 DDRC=0x00;
    18ec:	e4 e1       	ldi	r30, 0x14	; 20
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	10 82       	st	Z, r1
    18f2:	0b c0       	rjmp	.+22     	; 0x190a <SET_PORTDIRECTION+0xae>
	        	  	        	     }
	        	  break;
	                    }
	          case 4:{
	        	  if(direction!=INPUT){
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	88 23       	and	r24, r24
    18f8:	29 f0       	breq	.+10     	; 0x1904 <SET_PORTDIRECTION+0xa8>
	        	  	        		  DDRD=0xFF;
    18fa:	e1 e1       	ldi	r30, 0x11	; 17
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	80 83       	st	Z, r24
    1902:	03 c0       	rjmp	.+6      	; 0x190a <SET_PORTDIRECTION+0xae>
	        	  	        	  }
	        	  	        	  else{
	        	  	        		 DDRD=0x00;
    1904:	e1 e1       	ldi	r30, 0x11	; 17
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	10 82       	st	Z, r1
	        	  	        	     }
	        	  break;
	                   }
	                }
                 }
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <SET_PORTVALUE>:


void SET_PORTVALUE(u8 port,u8 value){
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <SET_PORTVALUE+0x6>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <SET_PORTVALUE+0x8>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	6a 83       	std	Y+2, r22	; 0x02
	switch(port){
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	3c 83       	std	Y+4, r19	; 0x04
    1930:	2b 83       	std	Y+3, r18	; 0x03
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	82 30       	cpi	r24, 0x02	; 2
    1938:	91 05       	cpc	r25, r1
    193a:	f9 f0       	breq	.+62     	; 0x197a <SET_PORTVALUE+0x62>
    193c:	2b 81       	ldd	r18, Y+3	; 0x03
    193e:	3c 81       	ldd	r19, Y+4	; 0x04
    1940:	23 30       	cpi	r18, 0x03	; 3
    1942:	31 05       	cpc	r19, r1
    1944:	34 f4       	brge	.+12     	; 0x1952 <SET_PORTVALUE+0x3a>
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	61 f0       	breq	.+24     	; 0x1968 <SET_PORTVALUE+0x50>
    1950:	2e c0       	rjmp	.+92     	; 0x19ae <SET_PORTVALUE+0x96>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	23 30       	cpi	r18, 0x03	; 3
    1958:	31 05       	cpc	r19, r1
    195a:	c1 f0       	breq	.+48     	; 0x198c <SET_PORTVALUE+0x74>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	84 30       	cpi	r24, 0x04	; 4
    1962:	91 05       	cpc	r25, r1
    1964:	e1 f0       	breq	.+56     	; 0x199e <SET_PORTVALUE+0x86>
    1966:	23 c0       	rjmp	.+70     	; 0x19ae <SET_PORTVALUE+0x96>
	          case 1:{
	        	  DDRA=0xFF;
    1968:	ea e1       	ldi	r30, 0x1A	; 26
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	80 83       	st	Z, r24
	        	  PORTA=value;
    1970:	eb e1       	ldi	r30, 0x1B	; 27
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	80 83       	st	Z, r24
    1978:	1a c0       	rjmp	.+52     	; 0x19ae <SET_PORTVALUE+0x96>
	        	  break;
	                }
	          case 2:{
	        	  DDRB=0xFF;
    197a:	e7 e1       	ldi	r30, 0x17	; 23
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	80 83       	st	Z, r24
	        	  PORTB=value;
    1982:	e8 e1       	ldi	r30, 0x18	; 24
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
    198a:	11 c0       	rjmp	.+34     	; 0x19ae <SET_PORTVALUE+0x96>
	        	  break;
	                   }
	          case 3:{
	        	  DDRC=0xFF;
    198c:	e4 e1       	ldi	r30, 0x14	; 20
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	80 83       	st	Z, r24
	        	  PORTC=value;
    1994:	e5 e1       	ldi	r30, 0x15	; 21
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
    199c:	08 c0       	rjmp	.+16     	; 0x19ae <SET_PORTVALUE+0x96>
	        	  break;
	                    }
	          case 4:{
	        	  DDRD=0xFF;
    199e:	e1 e1       	ldi	r30, 0x11	; 17
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	80 83       	st	Z, r24
	        	  PORTD=value;
    19a6:	e2 e1       	ldi	r30, 0x12	; 18
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	80 83       	st	Z, r24
	        	  break;
	                   }
	                }
             }
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <LCD_INITIALIZATION>:
#include<avr/delay.h>

#include<DIO.h>
#include<LCDFunc.h>

void LCD_INITIALIZATION(void){
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	6c 97       	sbiw	r28, 0x1c	; 28
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e2       	ldi	r26, 0x20	; 32
    19d6:	b2 e4       	ldi	r27, 0x42	; 66
    19d8:	89 8f       	std	Y+25, r24	; 0x19
    19da:	9a 8f       	std	Y+26, r25	; 0x1a
    19dc:	ab 8f       	std	Y+27, r26	; 0x1b
    19de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	69 8d       	ldd	r22, Y+25	; 0x19
    19e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a e7       	ldi	r20, 0x7A	; 122
    19ee:	55 e4       	ldi	r21, 0x45	; 69
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8d 8b       	std	Y+21, r24	; 0x15
    19fa:	9e 8b       	std	Y+22, r25	; 0x16
    19fc:	af 8b       	std	Y+23, r26	; 0x17
    19fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_INITIALIZATION+0x66>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <LCD_INITIALIZATION+0xe4>
	else if (__tmp > 65535)
    1a22:	6d 89       	ldd	r22, Y+21	; 0x15
    1a24:	7e 89       	ldd	r23, Y+22	; 0x16
    1a26:	8f 89       	ldd	r24, Y+23	; 0x17
    1a28:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <LCD_INITIALIZATION+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <LCD_INITIALIZATION+0xc6>
    1a64:	80 e9       	ldi	r24, 0x90	; 144
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	9a 8b       	std	Y+18, r25	; 0x12
    1a6a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6c:	89 89       	ldd	r24, Y+17	; 0x11
    1a6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_INITIALIZATION+0xb4>
    1a74:	9a 8b       	std	Y+18, r25	; 0x12
    1a76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <LCD_INITIALIZATION+0xa8>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <LCD_INITIALIZATION+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a90:	8f 89       	ldd	r24, Y+23	; 0x17
    1a92:	98 8d       	ldd	r25, Y+24	; 0x18
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 8b       	std	Y+20, r25	; 0x14
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa4:	98 8b       	std	Y+16, r25	; 0x10
    1aa6:	8f 87       	std	Y+15, r24	; 0x0f
    1aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aaa:	98 89       	ldd	r25, Y+16	; 0x10
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_INITIALIZATION+0xf0>
    1ab0:	98 8b       	std	Y+16, r25	; 0x10
    1ab2:	8f 87       	std	Y+15, r24	; 0x0f
	            _delay_ms(40);
				//DDRA=0b00000011;
		        DIO_SETPINDIRECT(4,7,OUTPUT);//RS pin of LCD
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	67 e0       	ldi	r22, 0x07	; 7
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
		        DIO_SETPINDIRECT(4,6,OUTPUT);//E pin of LCD
    1abe:	84 e0       	ldi	r24, 0x04	; 4
    1ac0:	66 e0       	ldi	r22, 0x06	; 6
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
		        //DDRC=0b11111111;
		        SET_PORTDIRECTION(3,OUTPUT);
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	0e 94 2e 0c 	call	0x185c	; 0x185c <SET_PORTDIRECTION>

				LCD_sendinst(0x01);
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_sendinst>
				LCD_sendinst(0x38);
    1ad6:	88 e3       	ldi	r24, 0x38	; 56
    1ad8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_sendinst>
				LCD_sendinst(0x0F);
    1adc:	8f e0       	ldi	r24, 0x0F	; 15
    1ade:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_sendinst>
				LCD_sendinst(0x06);
    1ae2:	86 e0       	ldi	r24, 0x06	; 6
    1ae4:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_sendinst>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e2       	ldi	r26, 0x20	; 32
    1aee:	b1 e4       	ldi	r27, 0x41	; 65
    1af0:	8b 87       	std	Y+11, r24	; 0x0b
    1af2:	9c 87       	std	Y+12, r25	; 0x0c
    1af4:	ad 87       	std	Y+13, r26	; 0x0d
    1af6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	55 e4       	ldi	r21, 0x45	; 69
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8f 83       	std	Y+7, r24	; 0x07
    1b12:	98 87       	std	Y+8, r25	; 0x08
    1b14:	a9 87       	std	Y+9, r26	; 0x09
    1b16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <LCD_INITIALIZATION+0x17e>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <LCD_INITIALIZATION+0x1fc>
	else if (__tmp > 65535)
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <LCD_INITIALIZATION+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_INITIALIZATION+0x1de>
    1b7c:	80 e9       	ldi	r24, 0x90	; 144
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_INITIALIZATION+0x1cc>
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_INITIALIZATION+0x1c0>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <LCD_INITIALIZATION+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_INITIALIZATION+0x208>
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
	            _delay_ms(10);
                    }
    1bcc:	6c 96       	adiw	r28, 0x1c	; 28
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <LCD_sendinst>:
void LCD_sendinst(u8 instr){
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	6d 97       	sbiw	r28, 0x1d	; 29
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	8d 8f       	std	Y+29, r24	; 0x1d
	            DIO_SETPINDIRECT(4,7,OUTPUT);
    1bf4:	84 e0       	ldi	r24, 0x04	; 4
    1bf6:	67 e0       	ldi	r22, 0x07	; 7
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
	            DIO_SETPINDIRECT(4,6,OUTPUT);
    1bfe:	84 e0       	ldi	r24, 0x04	; 4
    1c00:	66 e0       	ldi	r22, 0x06	; 6
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
	            DIO_SETPINVALUE(4,7,0);//RS pin of LCD
    1c08:	84 e0       	ldi	r24, 0x04	; 4
    1c0a:	67 e0       	ldi	r22, 0x07	; 7
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
                //DDRA=0xFF;
	            //CLR_BIT(PORTA,0);
	            PORTC=instr;
    1c12:	e5 e3       	ldi	r30, 0x35	; 53
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c18:	80 83       	st	Z, r24
                //SET_PORTDIRECTION(3,OUTPUT);
	            //SET_PORTVALUE(3,instr);
	            DIO_SETPINVALUE(4,6,1);//E pin of LCD
    1c1a:	84 e0       	ldi	r24, 0x04	; 4
    1c1c:	66 e0       	ldi	r22, 0x06	; 6
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a0 e8       	ldi	r26, 0x80	; 128
    1c2a:	bf e3       	ldi	r27, 0x3F	; 63
    1c2c:	89 8f       	std	Y+25, r24	; 0x19
    1c2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c30:	ab 8f       	std	Y+27, r26	; 0x1b
    1c32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	69 8d       	ldd	r22, Y+25	; 0x19
    1c36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	55 e4       	ldi	r21, 0x45	; 69
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8d 8b       	std	Y+21, r24	; 0x15
    1c4e:	9e 8b       	std	Y+22, r25	; 0x16
    1c50:	af 8b       	std	Y+23, r26	; 0x17
    1c52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c54:	6d 89       	ldd	r22, Y+21	; 0x15
    1c56:	7e 89       	ldd	r23, Y+22	; 0x16
    1c58:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <LCD_sendinst+0x98>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <LCD_sendinst+0x116>
	else if (__tmp > 65535)
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <LCD_sendinst+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9c 8b       	std	Y+20, r25	; 0x14
    1cb4:	8b 8b       	std	Y+19, r24	; 0x13
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <LCD_sendinst+0xf8>
    1cb8:	80 e9       	ldi	r24, 0x90	; 144
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	9a 8b       	std	Y+18, r25	; 0x12
    1cbe:	89 8b       	std	Y+17, r24	; 0x11
    1cc0:	89 89       	ldd	r24, Y+17	; 0x11
    1cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_sendinst+0xe6>
    1cc8:	9a 8b       	std	Y+18, r25	; 0x12
    1cca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9c 8b       	std	Y+20, r25	; 0x14
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <LCD_sendinst+0xda>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <LCD_sendinst+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9c 8b       	std	Y+20, r25	; 0x14
    1cf2:	8b 8b       	std	Y+19, r24	; 0x13
    1cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf8:	98 8b       	std	Y+16, r25	; 0x10
    1cfa:	8f 87       	std	Y+15, r24	; 0x0f
    1cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfe:	98 89       	ldd	r25, Y+16	; 0x10
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <LCD_sendinst+0x122>
    1d04:	98 8b       	std	Y+16, r25	; 0x10
    1d06:	8f 87       	std	Y+15, r24	; 0x0f
	            //SET_BIT(PORTA,1);
	            _delay_ms(1);
	            DIO_SETPINVALUE(4,6,0);
    1d08:	84 e0       	ldi	r24, 0x04	; 4
    1d0a:	66 e0       	ldi	r22, 0x06	; 6
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e2       	ldi	r26, 0x20	; 32
    1d18:	b1 e4       	ldi	r27, 0x41	; 65
    1d1a:	8b 87       	std	Y+11, r24	; 0x0b
    1d1c:	9c 87       	std	Y+12, r25	; 0x0c
    1d1e:	ad 87       	std	Y+13, r26	; 0x0d
    1d20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4a e7       	ldi	r20, 0x7A	; 122
    1d30:	55 e4       	ldi	r21, 0x45	; 69
    1d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8f 83       	std	Y+7, r24	; 0x07
    1d3c:	98 87       	std	Y+8, r25	; 0x08
    1d3e:	a9 87       	std	Y+9, r26	; 0x09
    1d40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d42:	6f 81       	ldd	r22, Y+7	; 0x07
    1d44:	78 85       	ldd	r23, Y+8	; 0x08
    1d46:	89 85       	ldd	r24, Y+9	; 0x09
    1d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <LCD_sendinst+0x186>
		__ticks = 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	3f c0       	rjmp	.+126    	; 0x1de2 <LCD_sendinst+0x204>
	else if (__tmp > 65535)
    1d64:	6f 81       	ldd	r22, Y+7	; 0x07
    1d66:	78 85       	ldd	r23, Y+8	; 0x08
    1d68:	89 85       	ldd	r24, Y+9	; 0x09
    1d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	3f ef       	ldi	r19, 0xFF	; 255
    1d70:	4f e7       	ldi	r20, 0x7F	; 127
    1d72:	57 e4       	ldi	r21, 0x47	; 71
    1d74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d78:	18 16       	cp	r1, r24
    1d7a:	4c f5       	brge	.+82     	; 0x1dce <LCD_sendinst+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e2       	ldi	r20, 0x20	; 32
    1d8a:	51 e4       	ldi	r21, 0x41	; 65
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <LCD_sendinst+0x1e6>
    1da6:	80 e9       	ldi	r24, 0x90	; 144
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	9c 83       	std	Y+4, r25	; 0x04
    1dac:	8b 83       	std	Y+3, r24	; 0x03
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_sendinst+0x1d4>
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    1db8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	69 f7       	brne	.-38     	; 0x1da6 <LCD_sendinst+0x1c8>
    1dcc:	14 c0       	rjmp	.+40     	; 0x1df6 <LCD_sendinst+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_sendinst+0x210>
    1df2:	9a 83       	std	Y+2, r25	; 0x02
    1df4:	89 83       	std	Y+1, r24	; 0x01
                //CLR_BIT(PORTA,1);
	            _delay_ms(10);

                    }
    1df6:	6d 96       	adiw	r28, 0x1d	; 29
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <LCD_senddata>:

void LCD_senddata(u8 data){
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	6d 97       	sbiw	r28, 0x1d	; 29
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	8d 8f       	std	Y+29, r24	; 0x1d
	            DIO_SETPINDIRECT(4,7,OUTPUT);
    1e1e:	84 e0       	ldi	r24, 0x04	; 4
    1e20:	67 e0       	ldi	r22, 0x07	; 7
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
	            DIO_SETPINDIRECT(4,6,OUTPUT);
    1e28:	84 e0       	ldi	r24, 0x04	; 4
    1e2a:	66 e0       	ldi	r22, 0x06	; 6
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
	            DIO_SETPINVALUE(4,7,1);//RS pin of LCD
    1e32:	84 e0       	ldi	r24, 0x04	; 4
    1e34:	67 e0       	ldi	r22, 0x07	; 7
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
	            DIO_SETPINVALUE(4,6,1);//E pin of LCD
    1e3c:	84 e0       	ldi	r24, 0x04	; 4
    1e3e:	66 e0       	ldi	r22, 0x06	; 6
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
	            PORTC=data;
    1e46:	e5 e3       	ldi	r30, 0x35	; 53
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4c:	80 83       	st	Z, r24
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a0 e0       	ldi	r26, 0x00	; 0
    1e54:	b0 e4       	ldi	r27, 0x40	; 64
    1e56:	89 8f       	std	Y+25, r24	; 0x19
    1e58:	9a 8f       	std	Y+26, r25	; 0x1a
    1e5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a e7       	ldi	r20, 0x7A	; 122
    1e6c:	55 e4       	ldi	r21, 0x45	; 69
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	8d 8b       	std	Y+21, r24	; 0x15
    1e78:	9e 8b       	std	Y+22, r25	; 0x16
    1e7a:	af 8b       	std	Y+23, r26	; 0x17
    1e7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <LCD_senddata+0x98>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c 8b       	std	Y+20, r25	; 0x14
    1e9c:	8b 8b       	std	Y+19, r24	; 0x13
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <LCD_senddata+0x116>
	else if (__tmp > 65535)
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <LCD_senddata+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9c 8b       	std	Y+20, r25	; 0x14
    1ede:	8b 8b       	std	Y+19, r24	; 0x13
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <LCD_senddata+0xf8>
    1ee2:	80 e9       	ldi	r24, 0x90	; 144
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	9a 8b       	std	Y+18, r25	; 0x12
    1ee8:	89 8b       	std	Y+17, r24	; 0x11
    1eea:	89 89       	ldd	r24, Y+17	; 0x11
    1eec:	9a 89       	ldd	r25, Y+18	; 0x12
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_senddata+0xe6>
    1ef2:	9a 8b       	std	Y+18, r25	; 0x12
    1ef4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	9c 8b       	std	Y+20, r25	; 0x14
    1efe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8b 89       	ldd	r24, Y+19	; 0x13
    1f02:	9c 89       	ldd	r25, Y+20	; 0x14
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <LCD_senddata+0xda>
    1f08:	14 c0       	rjmp	.+40     	; 0x1f32 <LCD_senddata+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f10:	98 8d       	ldd	r25, Y+24	; 0x18
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9c 8b       	std	Y+20, r25	; 0x14
    1f1c:	8b 8b       	std	Y+19, r24	; 0x13
    1f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f20:	9c 89       	ldd	r25, Y+20	; 0x14
    1f22:	98 8b       	std	Y+16, r25	; 0x10
    1f24:	8f 87       	std	Y+15, r24	; 0x0f
    1f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f28:	98 89       	ldd	r25, Y+16	; 0x10
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_senddata+0x122>
    1f2e:	98 8b       	std	Y+16, r25	; 0x10
    1f30:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(2);
                DIO_SETPINVALUE(4,6,0);
    1f32:	84 e0       	ldi	r24, 0x04	; 4
    1f34:	66 e0       	ldi	r22, 0x06	; 6
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a0 e2       	ldi	r26, 0x20	; 32
    1f42:	b1 e4       	ldi	r27, 0x41	; 65
    1f44:	8b 87       	std	Y+11, r24	; 0x0b
    1f46:	9c 87       	std	Y+12, r25	; 0x0c
    1f48:	ad 87       	std	Y+13, r26	; 0x0d
    1f4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a e7       	ldi	r20, 0x7A	; 122
    1f5a:	55 e4       	ldi	r21, 0x45	; 69
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8f 83       	std	Y+7, r24	; 0x07
    1f66:	98 87       	std	Y+8, r25	; 0x08
    1f68:	a9 87       	std	Y+9, r26	; 0x09
    1f6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <LCD_senddata+0x186>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <LCD_senddata+0x204>
	else if (__tmp > 65535)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <LCD_senddata+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <LCD_senddata+0x1e6>
    1fd0:	80 e9       	ldi	r24, 0x90	; 144
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_senddata+0x1d4>
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <LCD_senddata+0x1c8>
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <LCD_senddata+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_senddata+0x210>
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(10);
                    }
    2020:	6d 96       	adiw	r28, 0x1d	; 29
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <CLEAR_DISP>:

void CLEAR_DISP(void){
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	LCD_sendinst(1);
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_sendinst>
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <LCD_PrintNum>:


void LCD_PrintNum(u32 num){
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	a9 97       	sbiw	r28, 0x29	; 41
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	6e a3       	std	Y+38, r22	; 0x26
    2060:	7f a3       	std	Y+39, r23	; 0x27
    2062:	88 a7       	std	Y+40, r24	; 0x28
    2064:	99 a7       	std	Y+41, r25	; 0x29
	u8 k=0,r=0,len=0;
    2066:	1f 82       	std	Y+7, r1	; 0x07
    2068:	1e 82       	std	Y+6, r1	; 0x06
    206a:	1d 82       	std	Y+5, r1	; 0x05
	u32 n=0;
    206c:	19 82       	std	Y+1, r1	; 0x01
    206e:	1a 82       	std	Y+2, r1	; 0x02
    2070:	1b 82       	std	Y+3, r1	; 0x03
    2072:	1c 82       	std	Y+4, r1	; 0x04
		u8 ptr[30]={0};
    2074:	8e e1       	ldi	r24, 0x1E	; 30
    2076:	fe 01       	movw	r30, r28
    2078:	38 96       	adiw	r30, 0x08	; 8
    207a:	df 01       	movw	r26, r30
    207c:	98 2f       	mov	r25, r24
    207e:	1d 92       	st	X+, r1
    2080:	9a 95       	dec	r25
    2082:	e9 f7       	brne	.-6      	; 0x207e <LCD_PrintNum+0x38>
	    n=num;
    2084:	8e a1       	ldd	r24, Y+38	; 0x26
    2086:	9f a1       	ldd	r25, Y+39	; 0x27
    2088:	a8 a5       	ldd	r26, Y+40	; 0x28
    208a:	b9 a5       	ldd	r27, Y+41	; 0x29
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	ab 83       	std	Y+3, r26	; 0x03
    2092:	bc 83       	std	Y+4, r27	; 0x04

		do{
			ptr[k]=(n%10)+'0';//Getting ASCII of digit
    2094:	8f 81       	ldd	r24, Y+7	; 0x07
    2096:	08 2f       	mov	r16, r24
    2098:	10 e0       	ldi	r17, 0x00	; 0
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	ab 81       	ldd	r26, Y+3	; 0x03
    20a0:	bc 81       	ldd	r27, Y+4	; 0x04
    20a2:	2a e0       	ldi	r18, 0x0A	; 10
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodsi4>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	28 2f       	mov	r18, r24
    20b8:	20 5d       	subi	r18, 0xD0	; 208
    20ba:	ce 01       	movw	r24, r28
    20bc:	08 96       	adiw	r24, 0x08	; 8
    20be:	fc 01       	movw	r30, r24
    20c0:	e0 0f       	add	r30, r16
    20c2:	f1 1f       	adc	r31, r17
    20c4:	20 83       	st	Z, r18
			k++;
    20c6:	8f 81       	ldd	r24, Y+7	; 0x07
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	8f 83       	std	Y+7, r24	; 0x07
		    }while((n/=10)>0);
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	ab 81       	ldd	r26, Y+3	; 0x03
    20d2:	bc 81       	ldd	r27, Y+4	; 0x04
    20d4:	2a e0       	ldi	r18, 0x0A	; 10
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodsi4>
    20e4:	da 01       	movw	r26, r20
    20e6:	c9 01       	movw	r24, r18
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	ab 83       	std	Y+3, r26	; 0x03
    20ee:	bc 83       	std	Y+4, r27	; 0x04
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	ab 81       	ldd	r26, Y+3	; 0x03
    20f6:	bc 81       	ldd	r27, Y+4	; 0x04
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	a1 05       	cpc	r26, r1
    20fc:	b1 05       	cpc	r27, r1
    20fe:	51 f6       	brne	.-108    	; 0x2094 <LCD_PrintNum+0x4e>



		     ptr[k]='\0';//add terminating null at the end of array
    2100:	8f 81       	ldd	r24, Y+7	; 0x07
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	ce 01       	movw	r24, r28
    2108:	08 96       	adiw	r24, 0x08	; 8
    210a:	fc 01       	movw	r30, r24
    210c:	e2 0f       	add	r30, r18
    210e:	f3 1f       	adc	r31, r19
    2110:	10 82       	st	Z, r1


		len=strg_len(ptr);
    2112:	ce 01       	movw	r24, r28
    2114:	08 96       	adiw	r24, 0x08	; 8
    2116:	0e 94 13 11 	call	0x2226	; 0x2226 <strg_len>
    211a:	8d 83       	std	Y+5, r24	; 0x05
		reverse(len,ptr);
    211c:	9e 01       	movw	r18, r28
    211e:	28 5f       	subi	r18, 0xF8	; 248
    2120:	3f 4f       	sbci	r19, 0xFF	; 255
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	b9 01       	movw	r22, r18
    2126:	0e 94 31 11 	call	0x2262	; 0x2262 <reverse>

		for(r=0;ptr[r]!='\0';r++){
    212a:	1e 82       	std	Y+6, r1	; 0x06
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <LCD_PrintNum+0xee>
    212e:	8e 81       	ldd	r24, Y+6	; 0x06
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	8e 83       	std	Y+6, r24	; 0x06
    2134:	8e 81       	ldd	r24, Y+6	; 0x06
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	ce 01       	movw	r24, r28
    213c:	08 96       	adiw	r24, 0x08	; 8
    213e:	fc 01       	movw	r30, r24
    2140:	e2 0f       	add	r30, r18
    2142:	f3 1f       	adc	r31, r19
    2144:	80 81       	ld	r24, Z
    2146:	88 23       	and	r24, r24
    2148:	91 f7       	brne	.-28     	; 0x212e <LCD_PrintNum+0xe8>
		    }


	     if(ptr[r]=='\0'){
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	ce 01       	movw	r24, r28
    2152:	08 96       	adiw	r24, 0x08	; 8
    2154:	fc 01       	movw	r30, r24
    2156:	e2 0f       	add	r30, r18
    2158:	f3 1f       	adc	r31, r19
    215a:	80 81       	ld	r24, Z
    215c:	88 23       	and	r24, r24
    215e:	e1 f4       	brne	.+56     	; 0x2198 <LCD_PrintNum+0x152>
            r++;
    2160:	8e 81       	ldd	r24, Y+6	; 0x06
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	8e 83       	std	Y+6, r24	; 0x06
	    	 do{
	    	     LCD_senddata(ptr[r]);
    2166:	8e 81       	ldd	r24, Y+6	; 0x06
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	ce 01       	movw	r24, r28
    216e:	08 96       	adiw	r24, 0x08	; 8
    2170:	fc 01       	movw	r30, r24
    2172:	e2 0f       	add	r30, r18
    2174:	f3 1f       	adc	r31, r19
    2176:	80 81       	ld	r24, Z
    2178:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_senddata>
	    	     r++;
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	8e 83       	std	Y+6, r24	; 0x06
	             }while(ptr[r]!='\0');
    2182:	8e 81       	ldd	r24, Y+6	; 0x06
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	ce 01       	movw	r24, r28
    218a:	08 96       	adiw	r24, 0x08	; 8
    218c:	fc 01       	movw	r30, r24
    218e:	e2 0f       	add	r30, r18
    2190:	f3 1f       	adc	r31, r19
    2192:	80 81       	ld	r24, Z
    2194:	88 23       	and	r24, r24
    2196:	39 f7       	brne	.-50     	; 0x2166 <LCD_PrintNum+0x120>
	       }
	}
    2198:	a9 96       	adiw	r28, 0x29	; 41
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	08 95       	ret

000021ae <DO_OPR>:

u8 DO_OPR(u8 numA,u8 numB,u8 opr){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <DO_OPR+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <DO_OPR+0x8>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <DO_OPR+0xa>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	6a 83       	std	Y+2, r22	; 0x02
    21c0:	4b 83       	std	Y+3, r20	; 0x03
	switch (opr){
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3e 83       	std	Y+6, r19	; 0x06
    21ca:	2d 83       	std	Y+5, r18	; 0x05
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	91 05       	cpc	r25, r1
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <DO_OPR+0x48>
    21d6:	2d 81       	ldd	r18, Y+5	; 0x05
    21d8:	3e 81       	ldd	r19, Y+6	; 0x06
    21da:	23 30       	cpi	r18, 0x03	; 3
    21dc:	31 05       	cpc	r19, r1
    21de:	89 f0       	breq	.+34     	; 0x2202 <DO_OPR+0x54>
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	91 05       	cpc	r25, r1
    21e8:	99 f4       	brne	.+38     	; 0x2210 <DO_OPR+0x62>
	    case 1:{
	    	return (numA+numB);
    21ea:	99 81       	ldd	r25, Y+1	; 0x01
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	29 2f       	mov	r18, r25
    21f0:	28 0f       	add	r18, r24
    21f2:	2c 83       	std	Y+4, r18	; 0x04
    21f4:	0e c0       	rjmp	.+28     	; 0x2212 <DO_OPR+0x64>
	    	break;
	    }
	    case 2:{
	    	return (numA-numB);
    21f6:	99 81       	ldd	r25, Y+1	; 0x01
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	39 2f       	mov	r19, r25
    21fc:	38 1b       	sub	r19, r24
    21fe:	3c 83       	std	Y+4, r19	; 0x04
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <DO_OPR+0x64>
	    	break;
	    }
	    case 3:{
	    	return (numA*numB);
    2202:	99 81       	ldd	r25, Y+1	; 0x01
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	98 9f       	mul	r25, r24
    2208:	80 2d       	mov	r24, r0
    220a:	11 24       	eor	r1, r1
    220c:	8c 83       	std	Y+4, r24	; 0x04
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <DO_OPR+0x64>
	    	break;
	    }
	    default:{

	    	return 0;
    2210:	1c 82       	std	Y+4, r1	; 0x04
    2212:	8c 81       	ldd	r24, Y+4	; 0x04
	         break;
	            }
	}
     }
    2214:	26 96       	adiw	r28, 0x06	; 6
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <strg_len>:


u8 strg_len(u8 *p){
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <strg_len+0x6>
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	8a 83       	std	Y+2, r24	; 0x02
	u8 m=0;
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	08 c0       	rjmp	.+16     	; 0x224a <strg_len+0x24>
	while(*p!='\0'){
		m++;
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	89 83       	std	Y+1, r24	; 0x01
		p++;
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	9b 83       	std	Y+3, r25	; 0x03
    2248:	8a 83       	std	Y+2, r24	; 0x02
     }


u8 strg_len(u8 *p){
	u8 m=0;
	while(*p!='\0'){
    224a:	ea 81       	ldd	r30, Y+2	; 0x02
    224c:	fb 81       	ldd	r31, Y+3	; 0x03
    224e:	80 81       	ld	r24, Z
    2250:	88 23       	and	r24, r24
    2252:	99 f7       	brne	.-26     	; 0x223a <strg_len+0x14>
		m++;
		p++;
	}
	return m;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    }
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <reverse>:

void reverse(u8 length,u8 *s){
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <reverse+0x6>
    2268:	00 d0       	rcall	.+0      	; 0x226a <reverse+0x8>
    226a:	00 d0       	rcall	.+0      	; 0x226c <reverse+0xa>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	8c 83       	std	Y+4, r24	; 0x04
    2272:	7e 83       	std	Y+6, r23	; 0x06
    2274:	6d 83       	std	Y+5, r22	; 0x05
	 u8 w=0,z=0,q=0;
    2276:	1b 82       	std	Y+3, r1	; 0x03
    2278:	1a 82       	std	Y+2, r1	; 0x02
    227a:	19 82       	std	Y+1, r1	; 0x01


	    for(w=length,z=0;z<w;w--,z++){
    227c:	8c 81       	ldd	r24, Y+4	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
    2280:	1a 82       	std	Y+2, r1	; 0x02
    2282:	2c c0       	rjmp	.+88     	; 0x22dc <reverse+0x7a>
	    	q=*(s+w);
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	fc 01       	movw	r30, r24
    2290:	e2 0f       	add	r30, r18
    2292:	f3 1f       	adc	r31, r19
    2294:	80 81       	ld	r24, Z
    2296:	89 83       	std	Y+1, r24	; 0x01
	        *(s+w)=*(s+z);
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	dc 01       	movw	r26, r24
    22a4:	a2 0f       	add	r26, r18
    22a6:	b3 1f       	adc	r27, r19
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	fc 01       	movw	r30, r24
    22b4:	e2 0f       	add	r30, r18
    22b6:	f3 1f       	adc	r31, r19
    22b8:	80 81       	ld	r24, Z
    22ba:	8c 93       	st	X, r24
	        *(s+z)=q;
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	fc 01       	movw	r30, r24
    22c8:	e2 0f       	add	r30, r18
    22ca:	f3 1f       	adc	r31, r19
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	80 83       	st	Z, r24

void reverse(u8 length,u8 *s){
	 u8 w=0,z=0,q=0;


	    for(w=length,z=0;z<w;w--,z++){
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	81 50       	subi	r24, 0x01	; 1
    22d4:	8b 83       	std	Y+3, r24	; 0x03
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	8a 83       	std	Y+2, r24	; 0x02
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	98 17       	cp	r25, r24
    22e2:	80 f2       	brcs	.-96     	; 0x2284 <reverse+0x22>
	    	q=*(s+w);
	        *(s+w)=*(s+z);
	        *(s+z)=q;
	    }
}
    22e4:	26 96       	adiw	r28, 0x06	; 6
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <LCD_Printfloat>:





void LCD_Printfloat(f32 numb){
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	aa 97       	sbiw	r28, 0x2a	; 42
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	6f a3       	std	Y+39, r22	; 0x27
    2310:	78 a7       	std	Y+40, r23	; 0x28
    2312:	89 a7       	std	Y+41, r24	; 0x29
    2314:	9a a7       	std	Y+42, r25	; 0x2a
	u8 k=0,r=0,lenth=0,counter=0;
    2316:	18 86       	std	Y+8, r1	; 0x08
    2318:	1f 82       	std	Y+7, r1	; 0x07
    231a:	1e 82       	std	Y+6, r1	; 0x06
    231c:	1d 82       	std	Y+5, r1	; 0x05
	u32 n=0;
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	1a 82       	std	Y+2, r1	; 0x02
    2322:	1b 82       	std	Y+3, r1	; 0x03
    2324:	1c 82       	std	Y+4, r1	; 0x04
		u8 ptr[30]={0};
    2326:	8e e1       	ldi	r24, 0x1E	; 30
    2328:	fe 01       	movw	r30, r28
    232a:	39 96       	adiw	r30, 0x09	; 9
    232c:	df 01       	movw	r26, r30
    232e:	98 2f       	mov	r25, r24
    2330:	1d 92       	st	X+, r1
    2332:	9a 95       	dec	r25
    2334:	e9 f7       	brne	.-6      	; 0x2330 <LCD_Printfloat+0x3a>
		//numb=(numb * 5) / 1024;
	    //numb *= 10;
	    n=numb;
    2336:	6f a1       	ldd	r22, Y+39	; 0x27
    2338:	78 a5       	ldd	r23, Y+40	; 0x28
    233a:	89 a5       	ldd	r24, Y+41	; 0x29
    233c:	9a a5       	ldd	r25, Y+42	; 0x2a
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	ab 83       	std	Y+3, r26	; 0x03
    234c:	bc 83       	std	Y+4, r27	; 0x04

		do{
			ptr[k]=(n%10)+'0';//Getting ASCII of digit
    234e:	88 85       	ldd	r24, Y+8	; 0x08
    2350:	08 2f       	mov	r16, r24
    2352:	10 e0       	ldi	r17, 0x00	; 0
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	ab 81       	ldd	r26, Y+3	; 0x03
    235a:	bc 81       	ldd	r27, Y+4	; 0x04
    235c:	2a e0       	ldi	r18, 0x0A	; 10
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodsi4>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	28 2f       	mov	r18, r24
    2372:	20 5d       	subi	r18, 0xD0	; 208
    2374:	ce 01       	movw	r24, r28
    2376:	09 96       	adiw	r24, 0x09	; 9
    2378:	fc 01       	movw	r30, r24
    237a:	e0 0f       	add	r30, r16
    237c:	f1 1f       	adc	r31, r17
    237e:	20 83       	st	Z, r18
			k++;
    2380:	88 85       	ldd	r24, Y+8	; 0x08
    2382:	8f 5f       	subi	r24, 0xFF	; 255
    2384:	88 87       	std	Y+8, r24	; 0x08
		    }while((n/=10)>0);
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	ab 81       	ldd	r26, Y+3	; 0x03
    238c:	bc 81       	ldd	r27, Y+4	; 0x04
    238e:	2a e0       	ldi	r18, 0x0A	; 10
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodsi4>
    239e:	da 01       	movw	r26, r20
    23a0:	c9 01       	movw	r24, r18
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	ab 83       	std	Y+3, r26	; 0x03
    23a8:	bc 83       	std	Y+4, r27	; 0x04
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	ab 81       	ldd	r26, Y+3	; 0x03
    23b0:	bc 81       	ldd	r27, Y+4	; 0x04
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	a1 05       	cpc	r26, r1
    23b6:	b1 05       	cpc	r27, r1
    23b8:	51 f6       	brne	.-108    	; 0x234e <LCD_Printfloat+0x58>



		     ptr[k]='\0';//add terminating null at the end of array
    23ba:	88 85       	ldd	r24, Y+8	; 0x08
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	ce 01       	movw	r24, r28
    23c2:	09 96       	adiw	r24, 0x09	; 9
    23c4:	fc 01       	movw	r30, r24
    23c6:	e2 0f       	add	r30, r18
    23c8:	f3 1f       	adc	r31, r19
    23ca:	10 82       	st	Z, r1


		lenth=strg_len(ptr);
    23cc:	ce 01       	movw	r24, r28
    23ce:	09 96       	adiw	r24, 0x09	; 9
    23d0:	0e 94 13 11 	call	0x2226	; 0x2226 <strg_len>
    23d4:	8e 83       	std	Y+6, r24	; 0x06
		reverse(lenth,ptr);
    23d6:	9e 01       	movw	r18, r28
    23d8:	27 5f       	subi	r18, 0xF7	; 247
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	8e 81       	ldd	r24, Y+6	; 0x06
    23de:	b9 01       	movw	r22, r18
    23e0:	0e 94 31 11 	call	0x2262	; 0x2262 <reverse>

		for(r=0;ptr[r]!='\0';r++){
    23e4:	1f 82       	std	Y+7, r1	; 0x07
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <LCD_Printfloat+0xf8>
    23e8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	8f 83       	std	Y+7, r24	; 0x07
    23ee:	8f 81       	ldd	r24, Y+7	; 0x07
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	ce 01       	movw	r24, r28
    23f6:	09 96       	adiw	r24, 0x09	; 9
    23f8:	fc 01       	movw	r30, r24
    23fa:	e2 0f       	add	r30, r18
    23fc:	f3 1f       	adc	r31, r19
    23fe:	80 81       	ld	r24, Z
    2400:	88 23       	and	r24, r24
    2402:	91 f7       	brne	.-28     	; 0x23e8 <LCD_Printfloat+0xf2>
		    }


	     if(ptr[r]=='\0'){
    2404:	8f 81       	ldd	r24, Y+7	; 0x07
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	ce 01       	movw	r24, r28
    240c:	09 96       	adiw	r24, 0x09	; 9
    240e:	fc 01       	movw	r30, r24
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	80 81       	ld	r24, Z
    2416:	88 23       	and	r24, r24
    2418:	a1 f5       	brne	.+104    	; 0x2482 <LCD_Printfloat+0x18c>
            r++;
    241a:	8f 81       	ldd	r24, Y+7	; 0x07
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	8f 83       	std	Y+7, r24	; 0x07
	    	 do{
	    		 if(counter==0){
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	88 23       	and	r24, r24
    2424:	a9 f4       	brne	.+42     	; 0x2450 <LCD_Printfloat+0x15a>
	    	     LCD_senddata(ptr[r]);
    2426:	8f 81       	ldd	r24, Y+7	; 0x07
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	ce 01       	movw	r24, r28
    242e:	09 96       	adiw	r24, 0x09	; 9
    2430:	fc 01       	movw	r30, r24
    2432:	e2 0f       	add	r30, r18
    2434:	f3 1f       	adc	r31, r19
    2436:	80 81       	ld	r24, Z
    2438:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_senddata>
	    	     LCD_senddata('.');
    243c:	8e e2       	ldi	r24, 0x2E	; 46
    243e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_senddata>
	    	     r++;
    2442:	8f 81       	ldd	r24, Y+7	; 0x07
    2444:	8f 5f       	subi	r24, 0xFF	; 255
    2446:	8f 83       	std	Y+7, r24	; 0x07
	    	     counter++;
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	0e c0       	rjmp	.+28     	; 0x246c <LCD_Printfloat+0x176>
	    		        }
	    		 else{
	    			 LCD_senddata(ptr[r]);
    2450:	8f 81       	ldd	r24, Y+7	; 0x07
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	ce 01       	movw	r24, r28
    2458:	09 96       	adiw	r24, 0x09	; 9
    245a:	fc 01       	movw	r30, r24
    245c:	e2 0f       	add	r30, r18
    245e:	f3 1f       	adc	r31, r19
    2460:	80 81       	ld	r24, Z
    2462:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_senddata>
	    			 r++;
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	8f 83       	std	Y+7, r24	; 0x07
	    		     }
	             }while(ptr[r]!='\0');
    246c:	8f 81       	ldd	r24, Y+7	; 0x07
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	ce 01       	movw	r24, r28
    2474:	09 96       	adiw	r24, 0x09	; 9
    2476:	fc 01       	movw	r30, r24
    2478:	e2 0f       	add	r30, r18
    247a:	f3 1f       	adc	r31, r19
    247c:	80 81       	ld	r24, Z
    247e:	88 23       	and	r24, r24
    2480:	79 f6       	brne	.-98     	; 0x2420 <LCD_Printfloat+0x12a>
	       }
	}
    2482:	aa 96       	adiw	r28, 0x2a	; 42
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <__vector_10>:
#include<DIO.h>


u16 ctr=0;

ISR(TIMER0_COMP_vect){
    2498:	1f 92       	push	r1
    249a:	0f 92       	push	r0
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	0f 92       	push	r0
    24a0:	11 24       	eor	r1, r1
    24a2:	8f 93       	push	r24
    24a4:	9f 93       	push	r25
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
	ctr++;
    24ae:	80 91 50 01 	lds	r24, 0x0150
    24b2:	90 91 51 01 	lds	r25, 0x0151
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	90 93 51 01 	sts	0x0151, r25
    24bc:	80 93 50 01 	sts	0x0150, r24
             }
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	9f 91       	pop	r25
    24c6:	8f 91       	pop	r24
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <SW_TIMER0_init>:



void SW_TIMER0_init(void){
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
	 TCCR0=0b01000101;
    24da:	e3 e5       	ldi	r30, 0x53	; 83
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	85 e4       	ldi	r24, 0x45	; 69
    24e0:	80 83       	st	Z, r24
     OCR0=0xFF;
    24e2:	ec e5       	ldi	r30, 0x5C	; 92
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	80 83       	st	Z, r24
                }
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <SW_TIMER0_start>:


void SW_TIMER0_start(void){
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
     TIMSK=0x02;
    24f8:	e9 e5       	ldi	r30, 0x59	; 89
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	80 83       	st	Z, r24
                }
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <SW_TIMER0_stop>:

void SW_TIMER0_stop(void){
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	 TIMSK=0x00;
    250e:	e9 e5       	ldi	r30, 0x59	; 89
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	10 82       	st	Z, r1
                }
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <GetTIMER0_count>:

u16 GetTIMER0_count(void){
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	return ctr;
    2522:	80 91 50 01 	lds	r24, 0x0150
    2526:	90 91 51 01 	lds	r25, 0x0151
          }
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <SW_TIMER0_RESET>:


void SW_TIMER0_RESET(void){
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	 ctr=0;
    2538:	10 92 51 01 	sts	0x0151, r1
    253c:	10 92 50 01 	sts	0x0150, r1
                 }
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <Servo_init>:
#include<avr/delay.h>
#include<DIO.h>
#include<Servo_Driv.h>


void Servo_init(void){
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
	DIO_SETPINDIRECT(4,5,OUTPUT);
    254e:	84 e0       	ldi	r24, 0x04	; 4
    2550:	65 e0       	ldi	r22, 0x05	; 5
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>
	TCCR1A=0b10000010;
    2558:	ef e4       	ldi	r30, 0x4F	; 79
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	82 e8       	ldi	r24, 0x82	; 130
    255e:	80 83       	st	Z, r24
	TCCR1B=0b00011101;
    2560:	ee e4       	ldi	r30, 0x4E	; 78
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	8d e1       	ldi	r24, 0x1D	; 29
    2566:	80 83       	st	Z, r24
	ICR1=313;//Total period is 20 msec
    2568:	e6 e4       	ldi	r30, 0x46	; 70
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	89 e3       	ldi	r24, 0x39	; 57
    256e:	91 e0       	ldi	r25, 0x01	; 1
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
             }
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <Servo_move>:

void Servo_move(f32 duty_cycle){
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	28 97       	sbiw	r28, 0x08	; 8
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	6d 83       	std	Y+5, r22	; 0x05
    2594:	7e 83       	std	Y+6, r23	; 0x06
    2596:	8f 83       	std	Y+7, r24	; 0x07
    2598:	98 87       	std	Y+8, r25	; 0x08
	f32 f_duty=0.0;
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e0       	ldi	r26, 0x00	; 0
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	ab 83       	std	Y+3, r26	; 0x03
    25a8:	bc 83       	std	Y+4, r27	; 0x04
	//f_duty=(duty_cycle) * 313;
	//f_duty=f_duty/100.0;
	f_duty=(duty_cycle/100.0);
    25aa:	6d 81       	ldd	r22, Y+5	; 0x05
    25ac:	7e 81       	ldd	r23, Y+6	; 0x06
    25ae:	8f 81       	ldd	r24, Y+7	; 0x07
    25b0:	98 85       	ldd	r25, Y+8	; 0x08
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	48 ec       	ldi	r20, 0xC8	; 200
    25b8:	52 e4       	ldi	r21, 0x42	; 66
    25ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	ab 83       	std	Y+3, r26	; 0x03
    25c8:	bc 83       	std	Y+4, r27	; 0x04
	f_duty*=313;
    25ca:	69 81       	ldd	r22, Y+1	; 0x01
    25cc:	7a 81       	ldd	r23, Y+2	; 0x02
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e8       	ldi	r19, 0x80	; 128
    25d6:	4c e9       	ldi	r20, 0x9C	; 156
    25d8:	53 e4       	ldi	r21, 0x43	; 67
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	ab 83       	std	Y+3, r26	; 0x03
    25e8:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=f_duty;
    25ea:	0a e4       	ldi	r16, 0x4A	; 74
    25ec:	10 e0       	ldi	r17, 0x00	; 0
    25ee:	69 81       	ldd	r22, Y+1	; 0x01
    25f0:	7a 81       	ldd	r23, Y+2	; 0x02
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	f8 01       	movw	r30, r16
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
             }
    2604:	28 96       	adiw	r28, 0x08	; 8
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	08 95       	ret

0000261a <String_comp>:
/********************************************/
/*String_comp is used to compare two strings*/
/*    and returns 0 when both strings are   */
/*                                equal     */
/********************************************/
u8 String_comp(s8 arr_A[],u8 SIZE_A,s8 arr_B[],u8 SIZE_B){
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	28 97       	sbiw	r28, 0x08	; 8
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	8b 83       	std	Y+3, r24	; 0x03
    2632:	6d 83       	std	Y+5, r22	; 0x05
    2634:	5f 83       	std	Y+7, r21	; 0x07
    2636:	4e 83       	std	Y+6, r20	; 0x06
    2638:	28 87       	std	Y+8, r18	; 0x08
   u8 counter=SIZE_A,var;
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	8a 83       	std	Y+2, r24	; 0x02
   for(var=0;arr_A[var]!='\0' || arr_B[var]!='\0';var++){
    263e:	19 82       	std	Y+1, r1	; 0x01
    2640:	1a c0       	rjmp	.+52     	; 0x2676 <String_comp+0x5c>
	   if(arr_A[var]==arr_B[var]){
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	40 81       	ld	r20, Z
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	8e 81       	ldd	r24, Y+6	; 0x06
    265c:	9f 81       	ldd	r25, Y+7	; 0x07
    265e:	fc 01       	movw	r30, r24
    2660:	e2 0f       	add	r30, r18
    2662:	f3 1f       	adc	r31, r19
    2664:	80 81       	ld	r24, Z
    2666:	48 17       	cp	r20, r24
    2668:	19 f4       	brne	.+6      	; 0x2670 <String_comp+0x56>
		   counter--;
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	81 50       	subi	r24, 0x01	; 1
    266e:	8a 83       	std	Y+2, r24	; 0x02
/*    and returns 0 when both strings are   */
/*                                equal     */
/********************************************/
u8 String_comp(s8 arr_A[],u8 SIZE_A,s8 arr_B[],u8 SIZE_B){
   u8 counter=SIZE_A,var;
   for(var=0;arr_A[var]!='\0' || arr_B[var]!='\0';var++){
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	fc 01       	movw	r30, r24
    2682:	e2 0f       	add	r30, r18
    2684:	f3 1f       	adc	r31, r19
    2686:	80 81       	ld	r24, Z
    2688:	88 23       	and	r24, r24
    268a:	d9 f6       	brne	.-74     	; 0x2642 <String_comp+0x28>
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	8e 81       	ldd	r24, Y+6	; 0x06
    2694:	9f 81       	ldd	r25, Y+7	; 0x07
    2696:	fc 01       	movw	r30, r24
    2698:	e2 0f       	add	r30, r18
    269a:	f3 1f       	adc	r31, r19
    269c:	80 81       	ld	r24, Z
    269e:	88 23       	and	r24, r24
    26a0:	81 f6       	brne	.-96     	; 0x2642 <String_comp+0x28>
	                             }
	   else{
		   continue;
	       }
                                   }
   counter--;//decrement by 1 for null
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	81 50       	subi	r24, 0x01	; 1
    26a6:	8a 83       	std	Y+2, r24	; 0x02
   return counter;
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
                           }
    26aa:	28 96       	adiw	r28, 0x08	; 8
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCDPrint_string>:
/**********************************************/
/*Special Task to print a string on LCD*/
/**********************************************/


void LCDPrint_string(u8 arr[],u8 size){
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <LCDPrint_string+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <LCDPrint_string+0x8>
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	9b 83       	std	Y+3, r25	; 0x03
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	6c 83       	std	Y+4, r22	; 0x04
     u8 x_count=0;//counter to loop through string
    26ce:	19 82       	std	Y+1, r1	; 0x01
     for(x_count=0;arr[x_count]!='\0';x_count++){
    26d0:	19 82       	std	Y+1, r1	; 0x01
    26d2:	0e c0       	rjmp	.+28     	; 0x26f0 <LCDPrint_string+0x34>
    	 LCD_senddata(arr[x_count]);
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	fc 01       	movw	r30, r24
    26e0:	e2 0f       	add	r30, r18
    26e2:	f3 1f       	adc	r31, r19
    26e4:	80 81       	ld	r24, Z
    26e6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_senddata>
/**********************************************/


void LCDPrint_string(u8 arr[],u8 size){
     u8 x_count=0;//counter to loop through string
     for(x_count=0;arr[x_count]!='\0';x_count++){
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	9b 81       	ldd	r25, Y+3	; 0x03
    26fa:	fc 01       	movw	r30, r24
    26fc:	e2 0f       	add	r30, r18
    26fe:	f3 1f       	adc	r31, r19
    2700:	80 81       	ld	r24, Z
    2702:	88 23       	and	r24, r24
    2704:	39 f7       	brne	.-50     	; 0x26d4 <LCDPrint_string+0x18>
    	 LCD_senddata(arr[x_count]);
                             }
                        }
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <__vector_13>:
#include<DIO.h>

static u8 RxFlag=0;
static u8 RxBuffer=0;

ISR(USART_RXC_vect){
    2714:	1f 92       	push	r1
    2716:	0f 92       	push	r0
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	0f 92       	push	r0
    271c:	11 24       	eor	r1, r1
    271e:	8f 93       	push	r24
    2720:	ef 93       	push	r30
    2722:	ff 93       	push	r31
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	RxFlag=1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	80 93 52 01 	sts	0x0152, r24
	RxBuffer=UDR;
    2732:	ec e2       	ldi	r30, 0x2C	; 44
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 93 53 01 	sts	0x0153, r24
              }
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	ff 91       	pop	r31
    2742:	ef 91       	pop	r30
    2744:	8f 91       	pop	r24
    2746:	0f 90       	pop	r0
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	0f 90       	pop	r0
    274c:	1f 90       	pop	r1
    274e:	18 95       	reti

00002750 <USART_init>:


void USART_init(u32 baud){
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	28 97       	sbiw	r28, 0x08	; 8
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	69 83       	std	Y+1, r22	; 0x01
    2766:	7a 83       	std	Y+2, r23	; 0x02
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	9c 83       	std	Y+4, r25	; 0x04
  // UCSRB=0b00011000;
   SET_BIT(UCSRB,3);
    276c:	aa e2       	ldi	r26, 0x2A	; 42
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	ea e2       	ldi	r30, 0x2A	; 42
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	88 60       	ori	r24, 0x08	; 8
    2778:	8c 93       	st	X, r24
   SET_BIT(UCSRB,4);
    277a:	aa e2       	ldi	r26, 0x2A	; 42
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	ea e2       	ldi	r30, 0x2A	; 42
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	80 61       	ori	r24, 0x10	; 16
    2786:	8c 93       	st	X, r24
   UCSRC=0b10000110;   /*No Parity is selected :Bit 5,4*/ /*1-stop bit :Bit 3*/
    2788:	e0 e4       	ldi	r30, 0x40	; 64
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	86 e8       	ldi	r24, 0x86	; 134
    278e:	80 83       	st	Z, r24
   //SET_BIT(UCSRC,2);   /*8-bit transmission selected with UCSZ2=0*/
   //SET_BIT(UCSRC,1);   /*8-bit transmission selected with UCSZ2=0*/

   //UBRRH=0b00000000;/*may be used at high baud rates*/
   //UBRRL=baud;
   switch (baud){       /*Baud Rate selection*/
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	ab 81       	ldd	r26, Y+3	; 0x03
    2796:	bc 81       	ldd	r27, Y+4	; 0x04
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	af 83       	std	Y+7, r26	; 0x07
    279e:	b8 87       	std	Y+8, r27	; 0x08
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	af 81       	ldd	r26, Y+7	; 0x07
    27a6:	b8 85       	ldd	r27, Y+8	; 0x08
    27a8:	80 34       	cpi	r24, 0x40	; 64
    27aa:	28 e3       	ldi	r18, 0x38	; 56
    27ac:	92 07       	cpc	r25, r18
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	a2 07       	cpc	r26, r18
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	b2 07       	cpc	r27, r18
    27b6:	09 f4       	brne	.+2      	; 0x27ba <USART_init+0x6a>
    27b8:	8d c0       	rjmp	.+282    	; 0x28d4 <USART_init+0x184>
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	af 81       	ldd	r26, Y+7	; 0x07
    27c0:	b8 85       	ldd	r27, Y+8	; 0x08
    27c2:	81 34       	cpi	r24, 0x41	; 65
    27c4:	28 e3       	ldi	r18, 0x38	; 56
    27c6:	92 07       	cpc	r25, r18
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	a2 07       	cpc	r26, r18
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	b2 07       	cpc	r27, r18
    27d0:	40 f5       	brcc	.+80     	; 0x2822 <USART_init+0xd2>
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	af 81       	ldd	r26, Y+7	; 0x07
    27d8:	b8 85       	ldd	r27, Y+8	; 0x08
    27da:	80 3c       	cpi	r24, 0xC0	; 192
    27dc:	22 e1       	ldi	r18, 0x12	; 18
    27de:	92 07       	cpc	r25, r18
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	a2 07       	cpc	r26, r18
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	b2 07       	cpc	r27, r18
    27e8:	09 f4       	brne	.+2      	; 0x27ec <USART_init+0x9c>
    27ea:	64 c0       	rjmp	.+200    	; 0x28b4 <USART_init+0x164>
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	af 81       	ldd	r26, Y+7	; 0x07
    27f2:	b8 85       	ldd	r27, Y+8	; 0x08
    27f4:	80 38       	cpi	r24, 0x80	; 128
    27f6:	25 e2       	ldi	r18, 0x25	; 37
    27f8:	92 07       	cpc	r25, r18
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	a2 07       	cpc	r26, r18
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	b2 07       	cpc	r27, r18
    2802:	09 f4       	brne	.+2      	; 0x2806 <USART_init+0xb6>
    2804:	5f c0       	rjmp	.+190    	; 0x28c4 <USART_init+0x174>
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	af 81       	ldd	r26, Y+7	; 0x07
    280c:	b8 85       	ldd	r27, Y+8	; 0x08
    280e:	80 36       	cpi	r24, 0x60	; 96
    2810:	29 e0       	ldi	r18, 0x09	; 9
    2812:	92 07       	cpc	r25, r18
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	a2 07       	cpc	r26, r18
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	b2 07       	cpc	r27, r18
    281c:	09 f4       	brne	.+2      	; 0x2820 <USART_init+0xd0>
    281e:	41 c0       	rjmp	.+130    	; 0x28a2 <USART_init+0x152>
    2820:	81 c0       	rjmp	.+258    	; 0x2924 <USART_init+0x1d4>
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	af 81       	ldd	r26, Y+7	; 0x07
    2828:	b8 85       	ldd	r27, Y+8	; 0x08
    282a:	80 38       	cpi	r24, 0x80	; 128
    282c:	20 e7       	ldi	r18, 0x70	; 112
    282e:	92 07       	cpc	r25, r18
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	a2 07       	cpc	r26, r18
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	b2 07       	cpc	r27, r18
    2838:	09 f4       	brne	.+2      	; 0x283c <USART_init+0xec>
    283a:	5c c0       	rjmp	.+184    	; 0x28f4 <USART_init+0x1a4>
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	af 81       	ldd	r26, Y+7	; 0x07
    2842:	b8 85       	ldd	r27, Y+8	; 0x08
    2844:	81 38       	cpi	r24, 0x81	; 129
    2846:	20 e7       	ldi	r18, 0x70	; 112
    2848:	92 07       	cpc	r25, r18
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	a2 07       	cpc	r26, r18
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	b2 07       	cpc	r27, r18
    2852:	68 f4       	brcc	.+26     	; 0x286e <USART_init+0x11e>
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	af 81       	ldd	r26, Y+7	; 0x07
    285a:	b8 85       	ldd	r27, Y+8	; 0x08
    285c:	80 30       	cpi	r24, 0x00	; 0
    285e:	2b e4       	ldi	r18, 0x4B	; 75
    2860:	92 07       	cpc	r25, r18
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	a2 07       	cpc	r26, r18
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	b2 07       	cpc	r27, r18
    286a:	e1 f1       	breq	.+120    	; 0x28e4 <USART_init+0x194>
    286c:	5b c0       	rjmp	.+182    	; 0x2924 <USART_init+0x1d4>
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	af 81       	ldd	r26, Y+7	; 0x07
    2874:	b8 85       	ldd	r27, Y+8	; 0x08
    2876:	80 30       	cpi	r24, 0x00	; 0
    2878:	26 e9       	ldi	r18, 0x96	; 150
    287a:	92 07       	cpc	r25, r18
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	a2 07       	cpc	r26, r18
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	b2 07       	cpc	r27, r18
    2884:	09 f4       	brne	.+2      	; 0x2888 <USART_init+0x138>
    2886:	3e c0       	rjmp	.+124    	; 0x2904 <USART_init+0x1b4>
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	af 81       	ldd	r26, Y+7	; 0x07
    288e:	b8 85       	ldd	r27, Y+8	; 0x08
    2890:	80 30       	cpi	r24, 0x00	; 0
    2892:	21 ee       	ldi	r18, 0xE1	; 225
    2894:	92 07       	cpc	r25, r18
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	a2 07       	cpc	r26, r18
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	b2 07       	cpc	r27, r18
    289e:	d1 f1       	breq	.+116    	; 0x2914 <USART_init+0x1c4>
    28a0:	41 c0       	rjmp	.+130    	; 0x2924 <USART_init+0x1d4>
      case 2400:{
    	  UBRRH=0x01;
    28a2:	e0 e4       	ldi	r30, 0x40	; 64
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	80 83       	st	Z, r24
    	  UBRRL=0xA0;
    28aa:	e9 e2       	ldi	r30, 0x29	; 41
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 ea       	ldi	r24, 0xA0	; 160
    28b0:	80 83       	st	Z, r24
    28b2:	40 c0       	rjmp	.+128    	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      case 4800:{
    	  UBRRH=0x00;
    28b4:	e0 e4       	ldi	r30, 0x40	; 64
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	10 82       	st	Z, r1
    	  UBRRL=0xCF;
    28ba:	e9 e2       	ldi	r30, 0x29	; 41
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	8f ec       	ldi	r24, 0xCF	; 207
    28c0:	80 83       	st	Z, r24
    28c2:	38 c0       	rjmp	.+112    	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      case 9600:{
    	  UBRRH=0x00;
    28c4:	e0 e4       	ldi	r30, 0x40	; 64
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	10 82       	st	Z, r1
    	  UBRRL=0x67;
    28ca:	e9 e2       	ldi	r30, 0x29	; 41
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	87 e6       	ldi	r24, 0x67	; 103
    28d0:	80 83       	st	Z, r24
    28d2:	30 c0       	rjmp	.+96     	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      case 14400:{
    	  UBRRH=0x00;
    28d4:	e0 e4       	ldi	r30, 0x40	; 64
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	10 82       	st	Z, r1
    	  UBRRL=0x44;
    28da:	e9 e2       	ldi	r30, 0x29	; 41
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	84 e4       	ldi	r24, 0x44	; 68
    28e0:	80 83       	st	Z, r24
    28e2:	28 c0       	rjmp	.+80     	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      case 19200:{
    	  UBRRH=0x00;
    28e4:	e0 e4       	ldi	r30, 0x40	; 64
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	10 82       	st	Z, r1
    	  UBRRL=0x33;
    28ea:	e9 e2       	ldi	r30, 0x29	; 41
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	83 e3       	ldi	r24, 0x33	; 51
    28f0:	80 83       	st	Z, r24
    28f2:	20 c0       	rjmp	.+64     	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      case 28800:{
    	  UBRRH=0x00;
    28f4:	e0 e4       	ldi	r30, 0x40	; 64
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	10 82       	st	Z, r1
    	  UBRRL=0x22;
    28fa:	e9 e2       	ldi	r30, 0x29	; 41
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	82 e2       	ldi	r24, 0x22	; 34
    2900:	80 83       	st	Z, r24
    2902:	18 c0       	rjmp	.+48     	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      case 38400:{
    	  UBRRH=0x00;
    2904:	e0 e4       	ldi	r30, 0x40	; 64
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	10 82       	st	Z, r1
    	  UBRRL=0x19;
    290a:	e9 e2       	ldi	r30, 0x29	; 41
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	89 e1       	ldi	r24, 0x19	; 25
    2910:	80 83       	st	Z, r24
    2912:	10 c0       	rjmp	.+32     	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      case 57600:{
    	  UBRRH=0x00;
    2914:	e0 e4       	ldi	r30, 0x40	; 64
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	10 82       	st	Z, r1
    	  UBRRL=0x10;
    291a:	e9 e2       	ldi	r30, 0x29	; 41
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 e1       	ldi	r24, 0x10	; 16
    2920:	80 83       	st	Z, r24
    2922:	08 c0       	rjmp	.+16     	; 0x2934 <USART_init+0x1e4>
    	  break;
              }
      default:
    	  UBRRH=0x01;
    2924:	e0 e4       	ldi	r30, 0x40	; 64
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	80 83       	st	Z, r24
    	  UBRRL=0xA0;
    292c:	e9 e2       	ldi	r30, 0x29	; 41
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 ea       	ldi	r24, 0xA0	; 160
    2932:	80 83       	st	Z, r24
          break;
          }
}
    2934:	28 96       	adiw	r28, 0x08	; 8
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <USART_transmit>:

void USART_transmit(u8 data){
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	0f 92       	push	r0
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	89 83       	std	Y+1, r24	; 0x01
	while((UCSRA & (1<<UDRE))==0);
    2952:	eb e2       	ldi	r30, 0x2B	; 43
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	88 2f       	mov	r24, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	80 72       	andi	r24, 0x20	; 32
    295e:	90 70       	andi	r25, 0x00	; 0
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	b9 f3       	breq	.-18     	; 0x2952 <USART_transmit+0xc>

	UDR=data;
    2964:	ec e2       	ldi	r30, 0x2C	; 44
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	80 83       	st	Z, r24
}
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <USART_rece>:

u8 USART_rece(void){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
	//while((UCSRA & (1<<RXC))==0);
    RxFlag=0;
    297c:	10 92 52 01 	sts	0x0152, r1
	return RxBuffer;
    2980:	80 91 53 01 	lds	r24, 0x0153
}
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <USART_Interrupt>:



void USART_Interrupt(u8 direction){
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	00 d0       	rcall	.+0      	; 0x2990 <USART_Interrupt+0x6>
    2990:	0f 92       	push	r0
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG,7);//global interrupt enable
    2998:	af e3       	ldi	r26, 0x3F	; 63
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	ef e3       	ldi	r30, 0x3F	; 63
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	80 68       	ori	r24, 0x80	; 128
    29a4:	8c 93       	st	X, r24
	switch(direction){
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	3b 83       	std	Y+3, r19	; 0x03
    29ae:	2a 83       	std	Y+2, r18	; 0x02
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	9b 81       	ldd	r25, Y+3	; 0x03
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	91 05       	cpc	r25, r1
    29b8:	91 f0       	breq	.+36     	; 0x29de <USART_Interrupt+0x54>
    29ba:	2a 81       	ldd	r18, Y+2	; 0x02
    29bc:	3b 81       	ldd	r19, Y+3	; 0x03
    29be:	23 30       	cpi	r18, 0x03	; 3
    29c0:	31 05       	cpc	r19, r1
    29c2:	a9 f0       	breq	.+42     	; 0x29ee <USART_Interrupt+0x64>
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	9b 81       	ldd	r25, Y+3	; 0x03
    29c8:	81 30       	cpi	r24, 0x01	; 1
    29ca:	91 05       	cpc	r25, r1
    29cc:	f1 f4       	brne	.+60     	; 0x2a0a <USART_Interrupt+0x80>

	case 1:{
		SET_BIT(UCSRB,7);//enable Receive Interrupt
    29ce:	aa e2       	ldi	r26, 0x2A	; 42
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	ea e2       	ldi	r30, 0x2A	; 42
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	80 68       	ori	r24, 0x80	; 128
    29da:	8c 93       	st	X, r24
    29dc:	16 c0       	rjmp	.+44     	; 0x2a0a <USART_Interrupt+0x80>
        break;
	      }
	case 2:{
		SET_BIT(UCSRB,6);//enable transmit interrupt
    29de:	aa e2       	ldi	r26, 0x2A	; 42
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	ea e2       	ldi	r30, 0x2A	; 42
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 64       	ori	r24, 0x40	; 64
    29ea:	8c 93       	st	X, r24
    29ec:	0e c0       	rjmp	.+28     	; 0x2a0a <USART_Interrupt+0x80>
	    break;
	       }
	case 3:{
		SET_BIT(UCSRB,6);//enable transmit interrupt
    29ee:	aa e2       	ldi	r26, 0x2A	; 42
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	ea e2       	ldi	r30, 0x2A	; 42
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	80 64       	ori	r24, 0x40	; 64
    29fa:	8c 93       	st	X, r24
		SET_BIT(UCSRB,7);//enable Receive Interrupt
    29fc:	aa e2       	ldi	r26, 0x2A	; 42
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	ea e2       	ldi	r30, 0x2A	; 42
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 68       	ori	r24, 0x80	; 128
    2a08:	8c 93       	st	X, r24
	    }
	default:break;
   }


}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <GETRxSTATUS>:


u8 GETRxSTATUS(void){
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	return RxFlag;
    2a1e:	80 91 52 01 	lds	r24, 0x0152
                }
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <USART_TransmitString>:



void USART_TransmitString(u8 str[],u8 str_size){
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <USART_TransmitString+0x6>
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <USART_TransmitString+0x8>
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	9b 83       	std	Y+3, r25	; 0x03
    2a36:	8a 83       	std	Y+2, r24	; 0x02
    2a38:	6c 83       	std	Y+4, r22	; 0x04
	 u8 st_count;
	 for(st_count=0;str[st_count]!='\0';st_count++){
    2a3a:	19 82       	std	Y+1, r1	; 0x01
    2a3c:	0e c0       	rjmp	.+28     	; 0x2a5a <USART_TransmitString+0x32>
		 USART_transmit(str[st_count]);
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	9b 81       	ldd	r25, Y+3	; 0x03
    2a48:	fc 01       	movw	r30, r24
    2a4a:	e2 0f       	add	r30, r18
    2a4c:	f3 1f       	adc	r31, r19
    2a4e:	80 81       	ld	r24, Z
    2a50:	0e 94 a3 14 	call	0x2946	; 0x2946 <USART_transmit>



void USART_TransmitString(u8 str[],u8 str_size){
	 u8 st_count;
	 for(st_count=0;str[st_count]!='\0';st_count++){
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	fc 01       	movw	r30, r24
    2a66:	e2 0f       	add	r30, r18
    2a68:	f3 1f       	adc	r31, r19
    2a6a:	80 81       	ld	r24, Z
    2a6c:	88 23       	and	r24, r24
    2a6e:	39 f7       	brne	.-50     	; 0x2a3e <USART_TransmitString+0x16>
		 USART_transmit(str[st_count]);
		 /*add delay to give UART time to send data*/
	                                       }
                          }
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <main>:
/*                  of Name & password       */
/*********************************************/
u8 *ptr='\0';


int main(){
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	6c 97       	sbiw	r28, 0x1c	; 28
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
	/****************/
	/*Initialization*/
	/****************/
	LCD_INITIALIZATION();/*LCD Initialization*/
    2a96:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_INITIALIZATION>

	Servo_init();/*Servo Motor Initialization*/
    2a9a:	0e 94 a3 12 	call	0x2546	; 0x2546 <Servo_init>

	DIO_SETPINDIRECT(4,2,OUTPUT);/*LED Alarm Toggling in case of wrong input*/
    2a9e:	84 e0       	ldi	r24, 0x04	; 4
    2aa0:	62 e0       	ldi	r22, 0x02	; 2
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>

	DIO_SETPINDIRECT(4,3,OUTPUT);/*Buzzer Alarm Toggle in case of wrong input*/
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	63 e0       	ldi	r22, 0x03	; 3
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_SETPINDIRECT>

	ADC_init();/*ADC Initialization to take LDR Reading*/
    2ab2:	0e 94 91 06 	call	0xd22	; 0xd22 <ADC_init>

	USART_init(9600);/*UART Peripheral Initialization for Bluetooth*/
    2ab6:	60 e8       	ldi	r22, 0x80	; 128
    2ab8:	75 e2       	ldi	r23, 0x25	; 37
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	0e 94 a8 13 	call	0x2750	; 0x2750 <USART_init>
	USART_Interrupt(3);/*Enable UART Interrupt in Receiving & Transmitting Direction*/
    2ac2:	83 e0       	ldi	r24, 0x03	; 3
    2ac4:	0e 94 c5 14 	call	0x298a	; 0x298a <USART_Interrupt>

	bluetooth_init();/*Bluetooth Module initialization*/
    2ac8:	0e 94 76 08 	call	0x10ec	; 0x10ec <bluetooth_init>

	SW_TIMER0_init();/*Initialize Timer 0 to work as delay generator*/
    2acc:	0e 94 69 12 	call	0x24d2	; 0x24d2 <SW_TIMER0_init>

	ADC_startconv();/*ADC starts conversion of analog input signal*/
    2ad0:	0e 94 74 07 	call	0xee8	; 0xee8 <ADC_startconv>

    sei();/*Activate Global Interrupt*/
    2ad4:	78 94       	sei

    /*******************/
	/*While Application*/
	/*******************/
	while(1){
       while(GETRxSTATUS()==0);/*stay in loop as long as no data is received via UART/Bluetooth*/
    2ad6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <GETRxSTATUS>
    2ada:	88 23       	and	r24, r24
    2adc:	e1 f3       	breq	.-8      	; 0x2ad6 <main+0x58>

       /************************************/
       /*Receiving Input Name to compare it*/
       /************************************/
       for(i=0;i<15;i++){
    2ade:	10 92 6f 01 	sts	0x016F, r1
    2ae2:	13 c0       	rjmp	.+38     	; 0x2b0a <main+0x8c>
    	   inp_name[i]=USART_rece();/*>>>>>>>>>>Error here name may not be 16 characters*/
    2ae4:	80 91 6f 01 	lds	r24, 0x016F
    2ae8:	08 2f       	mov	r16, r24
    2aea:	10 e0       	ldi	r17, 0x00	; 0
    2aec:	0e 94 ba 14 	call	0x2974	; 0x2974 <USART_rece>
    2af0:	f8 01       	movw	r30, r16
    2af2:	ea 5a       	subi	r30, 0xAA	; 170
    2af4:	fe 4f       	sbci	r31, 0xFE	; 254
    2af6:	80 83       	st	Z, r24
    	   while(GETRxSTATUS()==0);
    2af8:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <GETRxSTATUS>
    2afc:	88 23       	and	r24, r24
    2afe:	e1 f3       	breq	.-8      	; 0x2af8 <main+0x7a>
       while(GETRxSTATUS()==0);/*stay in loop as long as no data is received via UART/Bluetooth*/

       /************************************/
       /*Receiving Input Name to compare it*/
       /************************************/
       for(i=0;i<15;i++){
    2b00:	80 91 6f 01 	lds	r24, 0x016F
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	80 93 6f 01 	sts	0x016F, r24
    2b0a:	80 91 6f 01 	lds	r24, 0x016F
    2b0e:	8f 30       	cpi	r24, 0x0F	; 15
    2b10:	48 f3       	brcs	.-46     	; 0x2ae4 <main+0x66>
    	   inp_name[i]=USART_rece();/*>>>>>>>>>>Error here name may not be 16 characters*/
    	   while(GETRxSTATUS()==0);
                  }
       inp_name[16]='\0';/*Adding a terminating Null to Name array as an end indication*/
    2b12:	10 92 66 01 	sts	0x0166, r1


       /*Prompting to Enter password*/
       LCDPrint_string(welcm,8);/*Show Welcome on LCD*/
    2b16:	87 ef       	ldi	r24, 0xF7	; 247
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	68 e0       	ldi	r22, 0x08	; 8
    2b1c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCDPrint_string>
       LCDPrint_string(pass_req,16);/*Show Enter Password on LCD*/
    2b20:	88 e1       	ldi	r24, 0x18	; 24
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	60 e1       	ldi	r22, 0x10	; 16
    2b26:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCDPrint_string>
       USART_TransmitString(welcm,8);/*Show Welcome on Mobile Terminal*/
    2b2a:	87 ef       	ldi	r24, 0xF7	; 247
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	68 e0       	ldi	r22, 0x08	; 8
    2b30:	0e 94 14 15 	call	0x2a28	; 0x2a28 <USART_TransmitString>
       USART_TransmitString(pass_req,16);/*Show Enter Password on Mobile Terminal*/
    2b34:	88 e1       	ldi	r24, 0x18	; 24
    2b36:	91 e0       	ldi	r25, 0x01	; 1
    2b38:	60 e1       	ldi	r22, 0x10	; 16
    2b3a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <USART_TransmitString>


       /************************************/
       /*Receiving Input password for house*/
       /************************************/
       while(GETRxSTATUS()==0);
    2b3e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <GETRxSTATUS>
    2b42:	88 23       	and	r24, r24
    2b44:	e1 f3       	breq	.-8      	; 0x2b3e <main+0xc0>
       for(i=0;i<3;i++){
    2b46:	10 92 6f 01 	sts	0x016F, r1
    2b4a:	13 c0       	rjmp	.+38     	; 0x2b72 <main+0xf4>
    	   inp_pass[i]=USART_rece();
    2b4c:	80 91 6f 01 	lds	r24, 0x016F
    2b50:	08 2f       	mov	r16, r24
    2b52:	10 e0       	ldi	r17, 0x00	; 0
    2b54:	0e 94 ba 14 	call	0x2974	; 0x2974 <USART_rece>
    2b58:	f8 01       	movw	r30, r16
    2b5a:	e9 59       	subi	r30, 0x99	; 153
    2b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5e:	80 83       	st	Z, r24
    	   while(GETRxSTATUS()==0);
    2b60:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <GETRxSTATUS>
    2b64:	88 23       	and	r24, r24
    2b66:	e1 f3       	breq	.-8      	; 0x2b60 <main+0xe2>

       /************************************/
       /*Receiving Input password for house*/
       /************************************/
       while(GETRxSTATUS()==0);
       for(i=0;i<3;i++){
    2b68:	80 91 6f 01 	lds	r24, 0x016F
    2b6c:	8f 5f       	subi	r24, 0xFF	; 255
    2b6e:	80 93 6f 01 	sts	0x016F, r24
    2b72:	80 91 6f 01 	lds	r24, 0x016F
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	48 f3       	brcs	.-46     	; 0x2b4c <main+0xce>
    	   inp_pass[i]=USART_rece();
    	   while(GETRxSTATUS()==0);
                    }
       inp_pass[4]='\0';/*Adding Terminating Null to pass array as an end indication*/
    2b7a:	10 92 6b 01 	sts	0x016B, r1


       /************************************************************/
       /*Comparing Name and Password to determine their correctness*/
       /************************************************************/
       tries=3;/*means you have 3 chances to enter wrong name & password before locking door*/
    2b7e:	83 e0       	ldi	r24, 0x03	; 3
    2b80:	80 93 6e 01 	sts	0x016E, r24
       while(1){

       /***************************************************************/
       /*In case input Name is ::Eslam Ibahim ,and, input pass is 1234*/
       /***************************************************************/
       if(String_comp(inp_name,13,name[0],13)==0 && String_comp(inp_pass,4,passw[0],4)==0){
    2b84:	20 91 e3 00 	lds	r18, 0x00E3
    2b88:	30 91 e4 00 	lds	r19, 0x00E4
    2b8c:	86 e5       	ldi	r24, 0x56	; 86
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	6d e0       	ldi	r22, 0x0D	; 13
    2b92:	a9 01       	movw	r20, r18
    2b94:	2d e0       	ldi	r18, 0x0D	; 13
    2b96:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2b9a:	88 23       	and	r24, r24
    2b9c:	e1 f5       	brne	.+120    	; 0x2c16 <main+0x198>
    2b9e:	20 91 ed 00 	lds	r18, 0x00ED
    2ba2:	30 91 ee 00 	lds	r19, 0x00EE
    2ba6:	87 e6       	ldi	r24, 0x67	; 103
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	64 e0       	ldi	r22, 0x04	; 4
    2bac:	a9 01       	movw	r20, r18
    2bae:	24 e0       	ldi	r18, 0x04	; 4
    2bb0:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2bb4:	88 23       	and	r24, r24
    2bb6:	79 f5       	brne	.+94     	; 0x2c16 <main+0x198>
           //if(String_comp(inp_pass,4,passw[0],4)==0){
        	   /*Open door by servo and light a led for a period of time*/
    	       Servo_move(10.0);
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	80 e2       	ldi	r24, 0x20	; 32
    2bbe:	91 e4       	ldi	r25, 0x41	; 65
    2bc0:	0e 94 bd 12 	call	0x257a	; 0x257a <Servo_move>
          /*Use Timer 0 to generate a delay of 5 seconds till user opens the door*/
    	  /*This delay is used to prevent system from locking door while user hasn't yet opened the door*/
    	       SW_TIMER0_start();
    2bc4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SW_TIMER0_start>
    	       while(1){
    	    	   if(GetTIMER0_count()==305){/*this value generates delay by 5 seconds with total period of 1 count = 256*(1024/16Mhz)*/
    2bc8:	0e 94 8d 12 	call	0x251a	; 0x251a <GetTIMER0_count>
    2bcc:	21 e0       	ldi	r18, 0x01	; 1
    2bce:	81 33       	cpi	r24, 0x31	; 49
    2bd0:	92 07       	cpc	r25, r18
    2bd2:	d1 f7       	brne	.-12     	; 0x2bc8 <main+0x14a>
    	    		   SW_TIMER0_RESET();
    2bd4:	0e 94 98 12 	call	0x2530	; 0x2530 <SW_TIMER0_RESET>
    	    		   SW_TIMER0_stop();
    2bd8:	0e 94 83 12 	call	0x2506	; 0x2506 <SW_TIMER0_stop>
    	    		   break;
    	    	             }
    	               }
    	       while(1){/*as long as photosensor giving zero reading door is opened*/
    	    	   ADC_Value=ADC_ReadFullvalue();
    2bdc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ADC_ReadFullvalue>
    2be0:	90 93 55 01 	sts	0x0155, r25
    2be4:	80 93 54 01 	sts	0x0154, r24
    	    	   if(ADC_Value<240 && ADC_Value>0){/*this means that door is closed*/
    2be8:	80 91 54 01 	lds	r24, 0x0154
    2bec:	90 91 55 01 	lds	r25, 0x0155
    2bf0:	80 3f       	cpi	r24, 0xF0	; 240
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	98 f7       	brcc	.-26     	; 0x2bdc <main+0x15e>
    2bf6:	80 91 54 01 	lds	r24, 0x0154
    2bfa:	90 91 55 01 	lds	r25, 0x0155
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f3       	breq	.-38     	; 0x2bdc <main+0x15e>
    	    	   else{/*As long as photosensor giving another reading , door is still open*/
    	    		   continue;
    	    	       }
    	                 }
    	       /*Lock door after user has closed it*/
    	       Servo_move(7.5);
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	80 ef       	ldi	r24, 0xF0	; 240
    2c08:	90 e4       	ldi	r25, 0x40	; 64
    2c0a:	0e 94 bd 12 	call	0x257a	; 0x257a <Servo_move>
        	   tries=2;/*Initialize no. of tries to 2 again*/
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	80 93 6e 01 	sts	0x016E, r24
    2c14:	60 cf       	rjmp	.-320    	; 0x2ad6 <main+0x58>


       /**********************************************************/
       /*In case input Name is ::Ahmed Assaf ,and, input pass is */
       /**********************************************************/
       else if(String_comp(inp_name,11,name[1],11)==0 && String_comp(inp_pass,4,passw[1],4)==0){
    2c16:	20 91 e5 00 	lds	r18, 0x00E5
    2c1a:	30 91 e6 00 	lds	r19, 0x00E6
    2c1e:	86 e5       	ldi	r24, 0x56	; 86
    2c20:	91 e0       	ldi	r25, 0x01	; 1
    2c22:	6b e0       	ldi	r22, 0x0B	; 11
    2c24:	a9 01       	movw	r20, r18
    2c26:	2b e0       	ldi	r18, 0x0B	; 11
    2c28:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2c2c:	88 23       	and	r24, r24
    2c2e:	89 f4       	brne	.+34     	; 0x2c52 <main+0x1d4>
    2c30:	20 91 ef 00 	lds	r18, 0x00EF
    2c34:	30 91 f0 00 	lds	r19, 0x00F0
    2c38:	87 e6       	ldi	r24, 0x67	; 103
    2c3a:	91 e0       	ldi	r25, 0x01	; 1
    2c3c:	64 e0       	ldi	r22, 0x04	; 4
    2c3e:	a9 01       	movw	r20, r18
    2c40:	24 e0       	ldi	r18, 0x04	; 4
    2c42:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2c46:	88 23       	and	r24, r24
    2c48:	21 f4       	brne	.+8      	; 0x2c52 <main+0x1d4>
    	  // if(String_comp(inp_pass,4,passw[1],4)==0){
    	           	   /*Open door by servo and light a led for a period of time*/
        	   tries=2;/*Initialize no. of tries to 2 again*/
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	80 93 6e 01 	sts	0x016E, r24
    2c50:	42 cf       	rjmp	.-380    	; 0x2ad6 <main+0x58>


       /***********************************************************/
       /*In case input Name is ::Ahmed Ibahim ,and, input pass is */
       /***********************************************************/
       else if(String_comp(inp_name,13,name[2],13)==0 && String_comp(inp_pass,4,passw[2],4)==0){
    2c52:	20 91 e7 00 	lds	r18, 0x00E7
    2c56:	30 91 e8 00 	lds	r19, 0x00E8
    2c5a:	86 e5       	ldi	r24, 0x56	; 86
    2c5c:	91 e0       	ldi	r25, 0x01	; 1
    2c5e:	6d e0       	ldi	r22, 0x0D	; 13
    2c60:	a9 01       	movw	r20, r18
    2c62:	2d e0       	ldi	r18, 0x0D	; 13
    2c64:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2c68:	88 23       	and	r24, r24
    2c6a:	89 f4       	brne	.+34     	; 0x2c8e <main+0x210>
    2c6c:	20 91 f1 00 	lds	r18, 0x00F1
    2c70:	30 91 f2 00 	lds	r19, 0x00F2
    2c74:	87 e6       	ldi	r24, 0x67	; 103
    2c76:	91 e0       	ldi	r25, 0x01	; 1
    2c78:	64 e0       	ldi	r22, 0x04	; 4
    2c7a:	a9 01       	movw	r20, r18
    2c7c:	24 e0       	ldi	r18, 0x04	; 4
    2c7e:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2c82:	88 23       	and	r24, r24
    2c84:	21 f4       	brne	.+8      	; 0x2c8e <main+0x210>
    	  // if(String_comp(inp_pass,4,passw[2],4)==0){
    	           	   /*Open door by servo and light a led for a period of time*/
        	   tries=2;/*Initialize no. of tries to 2 again*/
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	80 93 6e 01 	sts	0x016E, r24
    2c8c:	24 cf       	rjmp	.-440    	; 0x2ad6 <main+0x58>


       /**************************************************************/
       /*In case input Name is ::Hussein Elsayed ,and, input pass is */
       /**************************************************************/
       else if(String_comp(inp_name,15,name[3],15)==0 && String_comp(inp_pass,4,passw[3],4)==0){
    2c8e:	20 91 e9 00 	lds	r18, 0x00E9
    2c92:	30 91 ea 00 	lds	r19, 0x00EA
    2c96:	86 e5       	ldi	r24, 0x56	; 86
    2c98:	91 e0       	ldi	r25, 0x01	; 1
    2c9a:	6f e0       	ldi	r22, 0x0F	; 15
    2c9c:	a9 01       	movw	r20, r18
    2c9e:	2f e0       	ldi	r18, 0x0F	; 15
    2ca0:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2ca4:	88 23       	and	r24, r24
    2ca6:	89 f4       	brne	.+34     	; 0x2cca <main+0x24c>
    2ca8:	20 91 f3 00 	lds	r18, 0x00F3
    2cac:	30 91 f4 00 	lds	r19, 0x00F4
    2cb0:	87 e6       	ldi	r24, 0x67	; 103
    2cb2:	91 e0       	ldi	r25, 0x01	; 1
    2cb4:	64 e0       	ldi	r22, 0x04	; 4
    2cb6:	a9 01       	movw	r20, r18
    2cb8:	24 e0       	ldi	r18, 0x04	; 4
    2cba:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2cbe:	88 23       	and	r24, r24
    2cc0:	21 f4       	brne	.+8      	; 0x2cca <main+0x24c>
    	 //  if(String_comp(inp_pass,4,passw[3],4)==0){
    	           	   /*Open door by servo and light a led for a period of time*/
        	   tries=2;/*Initialize no. of tries to 2 again*/
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	80 93 6e 01 	sts	0x016E, r24
    2cc8:	06 cf       	rjmp	.-500    	; 0x2ad6 <main+0x58>


       /*************************************/
       /*In case input Name is ::Ahmed Gaber*/
       /*************************************/
       else if(String_comp(inp_name,11,name[4],11)==0 && String_comp(inp_pass,4,passw[4],4)==0){
    2cca:	20 91 eb 00 	lds	r18, 0x00EB
    2cce:	30 91 ec 00 	lds	r19, 0x00EC
    2cd2:	86 e5       	ldi	r24, 0x56	; 86
    2cd4:	91 e0       	ldi	r25, 0x01	; 1
    2cd6:	6b e0       	ldi	r22, 0x0B	; 11
    2cd8:	a9 01       	movw	r20, r18
    2cda:	2b e0       	ldi	r18, 0x0B	; 11
    2cdc:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <main+0x268>
    2ce4:	1c c1       	rjmp	.+568    	; 0x2f1e <main+0x4a0>
    2ce6:	20 91 f5 00 	lds	r18, 0x00F5
    2cea:	30 91 f6 00 	lds	r19, 0x00F6
    2cee:	87 e6       	ldi	r24, 0x67	; 103
    2cf0:	91 e0       	ldi	r25, 0x01	; 1
    2cf2:	64 e0       	ldi	r22, 0x04	; 4
    2cf4:	a9 01       	movw	r20, r18
    2cf6:	24 e0       	ldi	r18, 0x04	; 4
    2cf8:	0e 94 0d 13 	call	0x261a	; 0x261a <String_comp>
    2cfc:	88 23       	and	r24, r24
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <main+0x284>
    2d00:	0e c1       	rjmp	.+540    	; 0x2f1e <main+0x4a0>
    	 //  if(String_comp(inp_pass,4,passw[4],4)==0){
    	           	   /*Open door by servo and light a led for a period of time*/
        	   tries=2;/*Initialize no. of tries to 2 again*/
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	80 93 6e 01 	sts	0x016E, r24
    2d08:	e6 ce       	rjmp	.-564    	; 0x2ad6 <main+0x58>
                  //               }

       /*In case input Name or password is wrong you've 2 more tries*/
       else{
    	   while(tries==0){
    		   LCDPrint_string(lock_door,33);
    2d0a:	88 e2       	ldi	r24, 0x28	; 40
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	61 e2       	ldi	r22, 0x21	; 33
    2d10:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCDPrint_string>
    		   for(count=0;count<5;count++){
    2d14:	10 92 70 01 	sts	0x0170, r1
    2d18:	fd c0       	rjmp	.+506    	; 0x2f14 <main+0x496>
    		   DIO_SETPINVALUE(4,2,1);/*Toggling LED Alarm*/
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
    2d1c:	62 e0       	ldi	r22, 0x02	; 2
    2d1e:	41 e0       	ldi	r20, 0x01	; 1
    2d20:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    		   DIO_SETPINVALUE(4,3,1);/*Toggling Buzzer Alarm*/
    2d24:	84 e0       	ldi	r24, 0x04	; 4
    2d26:	63 e0       	ldi	r22, 0x03	; 3
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	aa ef       	ldi	r26, 0xFA	; 250
    2d34:	b3 e4       	ldi	r27, 0x43	; 67
    2d36:	89 8f       	std	Y+25, r24	; 0x19
    2d38:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a e7       	ldi	r20, 0x7A	; 122
    2d4c:	55 e4       	ldi	r21, 0x45	; 69
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8d 8b       	std	Y+21, r24	; 0x15
    2d58:	9e 8b       	std	Y+22, r25	; 0x16
    2d5a:	af 8b       	std	Y+23, r26	; 0x17
    2d5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d60:	7e 89       	ldd	r23, Y+22	; 0x16
    2d62:	8f 89       	ldd	r24, Y+23	; 0x17
    2d64:	98 8d       	ldd	r25, Y+24	; 0x18
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <main+0x302>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9c 8b       	std	Y+20, r25	; 0x14
    2d7c:	8b 8b       	std	Y+19, r24	; 0x13
    2d7e:	3f c0       	rjmp	.+126    	; 0x2dfe <main+0x380>
	else if (__tmp > 65535)
    2d80:	6d 89       	ldd	r22, Y+21	; 0x15
    2d82:	7e 89       	ldd	r23, Y+22	; 0x16
    2d84:	8f 89       	ldd	r24, Y+23	; 0x17
    2d86:	98 8d       	ldd	r25, Y+24	; 0x18
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	4c f5       	brge	.+82     	; 0x2dea <main+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d98:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9c 8b       	std	Y+20, r25	; 0x14
    2dbe:	8b 8b       	std	Y+19, r24	; 0x13
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <main+0x362>
    2dc2:	80 e9       	ldi	r24, 0x90	; 144
    2dc4:	91 e0       	ldi	r25, 0x01	; 1
    2dc6:	9a 8b       	std	Y+18, r25	; 0x12
    2dc8:	89 8b       	std	Y+17, r24	; 0x11
    2dca:	89 89       	ldd	r24, Y+17	; 0x11
    2dcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <main+0x350>
    2dd2:	9a 8b       	std	Y+18, r25	; 0x12
    2dd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	9c 8b       	std	Y+20, r25	; 0x14
    2dde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	8b 89       	ldd	r24, Y+19	; 0x13
    2de2:	9c 89       	ldd	r25, Y+20	; 0x14
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <main+0x344>
    2de8:	14 c0       	rjmp	.+40     	; 0x2e12 <main+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9c 8b       	std	Y+20, r25	; 0x14
    2dfc:	8b 8b       	std	Y+19, r24	; 0x13
    2dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2e00:	9c 89       	ldd	r25, Y+20	; 0x14
    2e02:	98 8b       	std	Y+16, r25	; 0x10
    2e04:	8f 87       	std	Y+15, r24	; 0x0f
    2e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e08:	98 89       	ldd	r25, Y+16	; 0x10
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <main+0x38c>
    2e0e:	98 8b       	std	Y+16, r25	; 0x10
    2e10:	8f 87       	std	Y+15, r24	; 0x0f
    		   _delay_ms(500);
    		   DIO_SETPINVALUE(4,2,0);/*Toggling LED Alarm*/
    2e12:	84 e0       	ldi	r24, 0x04	; 4
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    		   DIO_SETPINVALUE(4,3,0);/*Toggling Buzzer Alarm*/
    2e1c:	84 e0       	ldi	r24, 0x04	; 4
    2e1e:	63 e0       	ldi	r22, 0x03	; 3
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_SETPINVALUE>
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	aa ef       	ldi	r26, 0xFA	; 250
    2e2c:	b3 e4       	ldi	r27, 0x43	; 67
    2e2e:	8b 87       	std	Y+11, r24	; 0x0b
    2e30:	9c 87       	std	Y+12, r25	; 0x0c
    2e32:	ad 87       	std	Y+13, r26	; 0x0d
    2e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	4a e7       	ldi	r20, 0x7A	; 122
    2e44:	55 e4       	ldi	r21, 0x45	; 69
    2e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	8f 83       	std	Y+7, r24	; 0x07
    2e50:	98 87       	std	Y+8, r25	; 0x08
    2e52:	a9 87       	std	Y+9, r26	; 0x09
    2e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e56:	6f 81       	ldd	r22, Y+7	; 0x07
    2e58:	78 85       	ldd	r23, Y+8	; 0x08
    2e5a:	89 85       	ldd	r24, Y+9	; 0x09
    2e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e8       	ldi	r20, 0x80	; 128
    2e64:	5f e3       	ldi	r21, 0x3F	; 63
    2e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e6a:	88 23       	and	r24, r24
    2e6c:	2c f4       	brge	.+10     	; 0x2e78 <main+0x3fa>
		__ticks = 1;
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
    2e76:	3f c0       	rjmp	.+126    	; 0x2ef6 <main+0x478>
	else if (__tmp > 65535)
    2e78:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7a:	78 85       	ldd	r23, Y+8	; 0x08
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	3f ef       	ldi	r19, 0xFF	; 255
    2e84:	4f e7       	ldi	r20, 0x7F	; 127
    2e86:	57 e4       	ldi	r21, 0x47	; 71
    2e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e8c:	18 16       	cp	r1, r24
    2e8e:	4c f5       	brge	.+82     	; 0x2ee2 <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e2       	ldi	r20, 0x20	; 32
    2e9e:	51 e4       	ldi	r21, 0x41	; 65
    2ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	cd 01       	movw	r24, r26
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
    2eb8:	0f c0       	rjmp	.+30     	; 0x2ed8 <main+0x45a>
    2eba:	80 e9       	ldi	r24, 0x90	; 144
    2ebc:	91 e0       	ldi	r25, 0x01	; 1
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <main+0x448>
    2eca:	9c 83       	std	Y+4, r25	; 0x04
    2ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	9e 83       	std	Y+6, r25	; 0x06
    2ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	69 f7       	brne	.-38     	; 0x2eba <main+0x43c>
    2ee0:	14 c0       	rjmp	.+40     	; 0x2f0a <main+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee4:	78 85       	ldd	r23, Y+8	; 0x08
    2ee6:	89 85       	ldd	r24, Y+9	; 0x09
    2ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	9a 81       	ldd	r25, Y+2	; 0x02
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <main+0x484>
    2f06:	9a 83       	std	Y+2, r25	; 0x02
    2f08:	89 83       	std	Y+1, r24	; 0x01

       /*In case input Name or password is wrong you've 2 more tries*/
       else{
    	   while(tries==0){
    		   LCDPrint_string(lock_door,33);
    		   for(count=0;count<5;count++){
    2f0a:	80 91 70 01 	lds	r24, 0x0170
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	80 93 70 01 	sts	0x0170, r24
    2f14:	80 91 70 01 	lds	r24, 0x0170
    2f18:	85 30       	cpi	r24, 0x05	; 5
    2f1a:	08 f4       	brcc	.+2      	; 0x2f1e <main+0x4a0>
    2f1c:	fe ce       	rjmp	.-516    	; 0x2d1a <main+0x29c>
    	        //          }
                  //               }

       /*In case input Name or password is wrong you've 2 more tries*/
       else{
    	   while(tries==0){
    2f1e:	80 91 6e 01 	lds	r24, 0x016E
    2f22:	88 23       	and	r24, r24
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <main+0x4aa>
    2f26:	f1 ce       	rjmp	.-542    	; 0x2d0a <main+0x28c>
    		   DIO_SETPINVALUE(4,2,0);/*Toggling LED Alarm*/
    		   DIO_SETPINVALUE(4,3,0);/*Toggling Buzzer Alarm*/
    		   _delay_ms(500);
    		                                }
    		              }
    	   tries--;
    2f28:	80 91 6e 01 	lds	r24, 0x016E
    2f2c:	81 50       	subi	r24, 0x01	; 1
    2f2e:	80 93 6e 01 	sts	0x016E, r24
    	   LCDPrint_string(wrng_pass,25);
    2f32:	8f ef       	ldi	r24, 0xFF	; 255
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	69 e1       	ldi	r22, 0x19	; 25
    2f38:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCDPrint_string>
    2f3c:	23 ce       	rjmp	.-954    	; 0x2b84 <main+0x106>

00002f3e <__udivmodsi4>:
    2f3e:	a1 e2       	ldi	r26, 0x21	; 33
    2f40:	1a 2e       	mov	r1, r26
    2f42:	aa 1b       	sub	r26, r26
    2f44:	bb 1b       	sub	r27, r27
    2f46:	fd 01       	movw	r30, r26
    2f48:	0d c0       	rjmp	.+26     	; 0x2f64 <__udivmodsi4_ep>

00002f4a <__udivmodsi4_loop>:
    2f4a:	aa 1f       	adc	r26, r26
    2f4c:	bb 1f       	adc	r27, r27
    2f4e:	ee 1f       	adc	r30, r30
    2f50:	ff 1f       	adc	r31, r31
    2f52:	a2 17       	cp	r26, r18
    2f54:	b3 07       	cpc	r27, r19
    2f56:	e4 07       	cpc	r30, r20
    2f58:	f5 07       	cpc	r31, r21
    2f5a:	20 f0       	brcs	.+8      	; 0x2f64 <__udivmodsi4_ep>
    2f5c:	a2 1b       	sub	r26, r18
    2f5e:	b3 0b       	sbc	r27, r19
    2f60:	e4 0b       	sbc	r30, r20
    2f62:	f5 0b       	sbc	r31, r21

00002f64 <__udivmodsi4_ep>:
    2f64:	66 1f       	adc	r22, r22
    2f66:	77 1f       	adc	r23, r23
    2f68:	88 1f       	adc	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	1a 94       	dec	r1
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <__udivmodsi4_loop>
    2f70:	60 95       	com	r22
    2f72:	70 95       	com	r23
    2f74:	80 95       	com	r24
    2f76:	90 95       	com	r25
    2f78:	9b 01       	movw	r18, r22
    2f7a:	ac 01       	movw	r20, r24
    2f7c:	bd 01       	movw	r22, r26
    2f7e:	cf 01       	movw	r24, r30
    2f80:	08 95       	ret

00002f82 <__prologue_saves__>:
    2f82:	2f 92       	push	r2
    2f84:	3f 92       	push	r3
    2f86:	4f 92       	push	r4
    2f88:	5f 92       	push	r5
    2f8a:	6f 92       	push	r6
    2f8c:	7f 92       	push	r7
    2f8e:	8f 92       	push	r8
    2f90:	9f 92       	push	r9
    2f92:	af 92       	push	r10
    2f94:	bf 92       	push	r11
    2f96:	cf 92       	push	r12
    2f98:	df 92       	push	r13
    2f9a:	ef 92       	push	r14
    2f9c:	ff 92       	push	r15
    2f9e:	0f 93       	push	r16
    2fa0:	1f 93       	push	r17
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	ca 1b       	sub	r28, r26
    2fac:	db 0b       	sbc	r29, r27
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	09 94       	ijmp

00002fba <__epilogue_restores__>:
    2fba:	2a 88       	ldd	r2, Y+18	; 0x12
    2fbc:	39 88       	ldd	r3, Y+17	; 0x11
    2fbe:	48 88       	ldd	r4, Y+16	; 0x10
    2fc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fca:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fcc:	b9 84       	ldd	r11, Y+9	; 0x09
    2fce:	c8 84       	ldd	r12, Y+8	; 0x08
    2fd0:	df 80       	ldd	r13, Y+7	; 0x07
    2fd2:	ee 80       	ldd	r14, Y+6	; 0x06
    2fd4:	fd 80       	ldd	r15, Y+5	; 0x05
    2fd6:	0c 81       	ldd	r16, Y+4	; 0x04
    2fd8:	1b 81       	ldd	r17, Y+3	; 0x03
    2fda:	aa 81       	ldd	r26, Y+2	; 0x02
    2fdc:	b9 81       	ldd	r27, Y+1	; 0x01
    2fde:	ce 0f       	add	r28, r30
    2fe0:	d1 1d       	adc	r29, r1
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	ed 01       	movw	r28, r26
    2fee:	08 95       	ret

00002ff0 <_exit>:
    2ff0:	f8 94       	cli

00002ff2 <__stop_program>:
    2ff2:	ff cf       	rjmp	.-2      	; 0x2ff2 <__stop_program>
